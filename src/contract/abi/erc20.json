{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"mockstnear.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract stNEAR is ERC20 {\\r\\n    constructor(uint256 initialSupply) ERC20(\\\"Staked NEAR\\\", \\\"stNEAR\\\") {\\r\\n        _mint(msg.sender, initialSupply * 10 ** 24);\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 24;\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) public {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n}\\r\\n\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":false,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}}}}",
	"name": "stNEAR",
	"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"mockstnear.sol\":\"stNEAR\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"mockstnear.sol\":{\"keccak256\":\"0x8527e6f2dba2c0fb21aab74899be3e5c84d82ccd9af4b1013a70c8c7a032a925\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17fb09d3245c211051f11b0bd7a888514ac2913a2e07d2bccac7d624c3dfb57\",\"dweb:/ipfs/QmWNBWsdE7LwNPfzxV4r1APTELwo2tvydJrSytHqunKnSu\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_44": {
				"entryPoint": null,
				"id": 44,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_736": {
				"entryPoint": null,
				"id": 736,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_afterTokenTransfer_585": {
				"entryPoint": 619,
				"id": 585,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_beforeTokenTransfer_574": {
				"entryPoint": 614,
				"id": 574,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_mint_403": {
				"entryPoint": 249,
				"id": 403,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_decode_t_uint256_fromMemory": {
				"entryPoint": 665,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256_fromMemory": {
				"entryPoint": 688,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 1773,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 1905,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 1812,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 1922,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_dataslot_t_string_storage": {
				"entryPoint": 896,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 738,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 1715,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 1846,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_mul_t_uint256": {
				"entryPoint": 1640,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_t_string_storage": {
				"entryPoint": 1207,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"cleanup_t_uint256": {
				"entryPoint": 629,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"clear_storage_range_t_bytes1": {
				"entryPoint": 1168,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"convert_t_uint256_to_t_uint256": {
				"entryPoint": 1042,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 1362,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"divide_by_32_ceil": {
				"entryPoint": 917,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_byte_array_length": {
				"entryPoint": 843,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": 1332,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"identity": {
				"entryPoint": 1032,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"mask_bytes_dynamic": {
				"entryPoint": 1300,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 1593,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x22": {
				"entryPoint": 796,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 749,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"prepare_store_t_uint256": {
				"entryPoint": 1082,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 624,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"shift_left_dynamic": {
				"entryPoint": 933,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"shift_right_unsigned_dynamic": {
				"entryPoint": 1287,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"storage_set_to_zero_t_uint256": {
				"entryPoint": 1140,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e": {
				"entryPoint": 1732,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"update_byte_slice_dynamic32": {
				"entryPoint": 946,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"update_storage_value_t_uint256_to_t_uint256": {
				"entryPoint": 1092,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 639,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"zero_value_for_split_t_uint256": {
				"entryPoint": 1135,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:8502:5",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "47:35:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "57:19:5",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "73:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "67:5:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "67:9:5"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "57:6:5"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "40:6:5",
									"type": ""
								}
							],
							"src": "7:75:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "177:28:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "194:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "197:1:5",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "187:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "187:12:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "187:12:5"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nodeType": "YulFunctionDefinition",
							"src": "88:117:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "300:28:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "317:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "320:1:5",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "310:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "310:12:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "310:12:5"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nodeType": "YulFunctionDefinition",
							"src": "211:117:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "379:32:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "389:16:5",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "400:5:5"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "389:7:5"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "361:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "371:7:5",
									"type": ""
								}
							],
							"src": "334:77:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "460:79:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "517:16:5",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "526:1:5",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "529:1:5",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "519:6:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "519:12:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "519:12:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "483:5:5"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "508:5:5"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "490:17:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "490:24:5"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "480:2:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "480:35:5"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "473:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "473:43:5"
										},
										"nodeType": "YulIf",
										"src": "470:63:5"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "453:5:5",
									"type": ""
								}
							],
							"src": "417:122:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "608:80:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "618:22:5",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "633:6:5"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "627:5:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "627:13:5"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "618:5:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "676:5:5"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "649:26:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "649:33:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "649:33:5"
									}
								]
							},
							"name": "abi_decode_t_uint256_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "586:6:5",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "594:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "602:5:5",
									"type": ""
								}
							],
							"src": "545:143:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "771:274:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "817:83:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "819:77:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "819:79:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "819:79:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "792:7:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "801:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "788:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "788:23:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "813:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "784:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "784:32:5"
										},
										"nodeType": "YulIf",
										"src": "781:119:5"
									},
									{
										"nodeType": "YulBlock",
										"src": "910:128:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "925:15:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "939:1:5",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "929:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "954:74:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "1000:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "1011:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "996:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "996:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "1020:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256_fromMemory",
														"nodeType": "YulIdentifier",
														"src": "964:31:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "964:64:5"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "954:6:5"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256_fromMemory",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "741:9:5",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "752:7:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "764:6:5",
									"type": ""
								}
							],
							"src": "694:351:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1110:40:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1121:22:5",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1137:5:5"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "1131:5:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1131:12:5"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "1121:6:5"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1093:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "1103:6:5",
									"type": ""
								}
							],
							"src": "1051:99:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1184:152:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1201:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1204:77:5",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1194:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1194:88:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1194:88:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1298:1:5",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1301:4:5",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1291:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1291:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1291:15:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1322:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1325:4:5",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "1315:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1315:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1315:15:5"
									}
								]
							},
							"name": "panic_error_0x41",
							"nodeType": "YulFunctionDefinition",
							"src": "1156:180:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1370:152:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1387:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1390:77:5",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1380:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1380:88:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1380:88:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1484:1:5",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1487:4:5",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1477:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1477:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1477:15:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1508:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1511:4:5",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "1501:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1501:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1501:15:5"
									}
								]
							},
							"name": "panic_error_0x22",
							"nodeType": "YulFunctionDefinition",
							"src": "1342:180:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1579:269:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1589:22:5",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "1603:4:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1609:1:5",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "1599:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1599:12:5"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "1589:6:5"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "1620:38:5",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "1650:4:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1656:1:5",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "1646:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1646:12:5"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nodeType": "YulTypedName",
												"src": "1624:18:5",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1697:51:5",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "1711:27:5",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "1725:6:5"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1733:4:5",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nodeType": "YulIdentifier",
															"src": "1721:3:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "1721:17:5"
													},
													"variableNames": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1711:6:5"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "1677:18:5"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "1670:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1670:26:5"
										},
										"nodeType": "YulIf",
										"src": "1667:81:5"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "1800:42:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nodeType": "YulIdentifier",
															"src": "1814:16:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "1814:18:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "1814:18:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "1764:18:5"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1787:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1795:2:5",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "1784:2:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "1784:14:5"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "1761:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1761:38:5"
										},
										"nodeType": "YulIf",
										"src": "1758:84:5"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "1563:4:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "1572:6:5",
									"type": ""
								}
							],
							"src": "1528:320:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1908:87:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1918:11:5",
										"value": {
											"name": "ptr",
											"nodeType": "YulIdentifier",
											"src": "1926:3:5"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "1918:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1946:1:5",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nodeType": "YulIdentifier",
													"src": "1949:3:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1939:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1939:14:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1939:14:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "1962:26:5",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1980:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1983:4:5",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nodeType": "YulIdentifier",
												"src": "1970:9:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1970:18:5"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "1962:4:5"
											}
										]
									}
								]
							},
							"name": "array_dataslot_t_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nodeType": "YulTypedName",
									"src": "1895:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "1903:4:5",
									"type": ""
								}
							],
							"src": "1854:141:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2045:49:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2055:33:5",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2073:5:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "2080:2:5",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "2069:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "2069:14:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2085:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "2065:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2065:23:5"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "2055:6:5"
											}
										]
									}
								]
							},
							"name": "divide_by_32_ceil",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2028:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "2038:6:5",
									"type": ""
								}
							],
							"src": "2001:93:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2153:54:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2163:37:5",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nodeType": "YulIdentifier",
													"src": "2188:4:5"
												},
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2194:5:5"
												}
											],
											"functionName": {
												"name": "shl",
												"nodeType": "YulIdentifier",
												"src": "2184:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2184:16:5"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nodeType": "YulIdentifier",
												"src": "2163:8:5"
											}
										]
									}
								]
							},
							"name": "shift_left_dynamic",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nodeType": "YulTypedName",
									"src": "2128:4:5",
									"type": ""
								},
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2134:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nodeType": "YulTypedName",
									"src": "2144:8:5",
									"type": ""
								}
							],
							"src": "2100:107:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2289:317:5",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "2299:35:5",
										"value": {
											"arguments": [
												{
													"name": "shiftBytes",
													"nodeType": "YulIdentifier",
													"src": "2320:10:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2332:1:5",
													"type": "",
													"value": "8"
												}
											],
											"functionName": {
												"name": "mul",
												"nodeType": "YulIdentifier",
												"src": "2316:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2316:18:5"
										},
										"variables": [
											{
												"name": "shiftBits",
												"nodeType": "YulTypedName",
												"src": "2303:9:5",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "2343:109:5",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nodeType": "YulIdentifier",
													"src": "2374:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2385:66:5",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nodeType": "YulIdentifier",
												"src": "2355:18:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2355:97:5"
										},
										"variables": [
											{
												"name": "mask",
												"nodeType": "YulTypedName",
												"src": "2347:4:5",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2461:51:5",
										"value": {
											"arguments": [
												{
													"name": "shiftBits",
													"nodeType": "YulIdentifier",
													"src": "2492:9:5"
												},
												{
													"name": "toInsert",
													"nodeType": "YulIdentifier",
													"src": "2503:8:5"
												}
											],
											"functionName": {
												"name": "shift_left_dynamic",
												"nodeType": "YulIdentifier",
												"src": "2473:18:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2473:39:5"
										},
										"variableNames": [
											{
												"name": "toInsert",
												"nodeType": "YulIdentifier",
												"src": "2461:8:5"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2521:30:5",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2534:5:5"
												},
												{
													"arguments": [
														{
															"name": "mask",
															"nodeType": "YulIdentifier",
															"src": "2545:4:5"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "2541:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "2541:9:5"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "2530:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2530:21:5"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "2521:5:5"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "2560:40:5",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2573:5:5"
												},
												{
													"arguments": [
														{
															"name": "toInsert",
															"nodeType": "YulIdentifier",
															"src": "2584:8:5"
														},
														{
															"name": "mask",
															"nodeType": "YulIdentifier",
															"src": "2594:4:5"
														}
													],
													"functionName": {
														"name": "and",
														"nodeType": "YulIdentifier",
														"src": "2580:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "2580:19:5"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "2570:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2570:30:5"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "2560:6:5"
											}
										]
									}
								]
							},
							"name": "update_byte_slice_dynamic32",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2250:5:5",
									"type": ""
								},
								{
									"name": "shiftBytes",
									"nodeType": "YulTypedName",
									"src": "2257:10:5",
									"type": ""
								},
								{
									"name": "toInsert",
									"nodeType": "YulTypedName",
									"src": "2269:8:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "2282:6:5",
									"type": ""
								}
							],
							"src": "2213:393:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2644:28:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2654:12:5",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "2661:5:5"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "2654:3:5"
											}
										]
									}
								]
							},
							"name": "identity",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2630:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "2640:3:5",
									"type": ""
								}
							],
							"src": "2612:60:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2738:82:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2748:66:5",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2806:5:5"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "2788:17:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "2788:24:5"
														}
													],
													"functionName": {
														"name": "identity",
														"nodeType": "YulIdentifier",
														"src": "2779:8:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "2779:34:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "2761:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2761:53:5"
										},
										"variableNames": [
											{
												"name": "converted",
												"nodeType": "YulIdentifier",
												"src": "2748:9:5"
											}
										]
									}
								]
							},
							"name": "convert_t_uint256_to_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2718:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "converted",
									"nodeType": "YulTypedName",
									"src": "2728:9:5",
									"type": ""
								}
							],
							"src": "2678:142:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2873:28:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2883:12:5",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "2890:5:5"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "2883:3:5"
											}
										]
									}
								]
							},
							"name": "prepare_store_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2859:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "2869:3:5",
									"type": ""
								}
							],
							"src": "2826:75:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2983:193:5",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "2993:63:5",
										"value": {
											"arguments": [
												{
													"name": "value_0",
													"nodeType": "YulIdentifier",
													"src": "3048:7:5"
												}
											],
											"functionName": {
												"name": "convert_t_uint256_to_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "3017:30:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3017:39:5"
										},
										"variables": [
											{
												"name": "convertedValue_0",
												"nodeType": "YulTypedName",
												"src": "2997:16:5",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nodeType": "YulIdentifier",
													"src": "3072:4:5"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nodeType": "YulIdentifier",
																	"src": "3112:4:5"
																}
															],
															"functionName": {
																"name": "sload",
																"nodeType": "YulIdentifier",
																"src": "3106:5:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "3106:11:5"
														},
														{
															"name": "offset",
															"nodeType": "YulIdentifier",
															"src": "3119:6:5"
														},
														{
															"arguments": [
																{
																	"name": "convertedValue_0",
																	"nodeType": "YulIdentifier",
																	"src": "3151:16:5"
																}
															],
															"functionName": {
																"name": "prepare_store_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "3127:23:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "3127:41:5"
														}
													],
													"functionName": {
														"name": "update_byte_slice_dynamic32",
														"nodeType": "YulIdentifier",
														"src": "3078:27:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "3078:91:5"
												}
											],
											"functionName": {
												"name": "sstore",
												"nodeType": "YulIdentifier",
												"src": "3065:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3065:105:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3065:105:5"
									}
								]
							},
							"name": "update_storage_value_t_uint256_to_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nodeType": "YulTypedName",
									"src": "2960:4:5",
									"type": ""
								},
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "2966:6:5",
									"type": ""
								},
								{
									"name": "value_0",
									"nodeType": "YulTypedName",
									"src": "2974:7:5",
									"type": ""
								}
							],
							"src": "2907:269:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3231:24:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3241:8:5",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "3248:1:5",
											"type": "",
											"value": "0"
										},
										"variableNames": [
											{
												"name": "ret",
												"nodeType": "YulIdentifier",
												"src": "3241:3:5"
											}
										]
									}
								]
							},
							"name": "zero_value_for_split_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "ret",
									"nodeType": "YulTypedName",
									"src": "3227:3:5",
									"type": ""
								}
							],
							"src": "3182:73:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3314:136:5",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "3324:46:5",
										"value": {
											"arguments": [],
											"functionName": {
												"name": "zero_value_for_split_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "3338:30:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3338:32:5"
										},
										"variables": [
											{
												"name": "zero_0",
												"nodeType": "YulTypedName",
												"src": "3328:6:5",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nodeType": "YulIdentifier",
													"src": "3423:4:5"
												},
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "3429:6:5"
												},
												{
													"name": "zero_0",
													"nodeType": "YulIdentifier",
													"src": "3437:6:5"
												}
											],
											"functionName": {
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "3379:43:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3379:65:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3379:65:5"
									}
								]
							},
							"name": "storage_set_to_zero_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nodeType": "YulTypedName",
									"src": "3300:4:5",
									"type": ""
								},
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "3306:6:5",
									"type": ""
								}
							],
							"src": "3261:189:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3506:136:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3573:63:5",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "start",
																"nodeType": "YulIdentifier",
																"src": "3617:5:5"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3624:1:5",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "storage_set_to_zero_t_uint256",
															"nodeType": "YulIdentifier",
															"src": "3587:29:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "3587:39:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3587:39:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "start",
													"nodeType": "YulIdentifier",
													"src": "3526:5:5"
												},
												{
													"name": "end",
													"nodeType": "YulIdentifier",
													"src": "3533:3:5"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "3523:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3523:14:5"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "3538:26:5",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "3540:22:5",
													"value": {
														"arguments": [
															{
																"name": "start",
																"nodeType": "YulIdentifier",
																"src": "3553:5:5"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3560:1:5",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "3549:3:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "3549:13:5"
													},
													"variableNames": [
														{
															"name": "start",
															"nodeType": "YulIdentifier",
															"src": "3540:5:5"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "3520:2:5",
											"statements": []
										},
										"src": "3516:120:5"
									}
								]
							},
							"name": "clear_storage_range_t_bytes1",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "start",
									"nodeType": "YulTypedName",
									"src": "3494:5:5",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "3501:3:5",
									"type": ""
								}
							],
							"src": "3456:186:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3727:464:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3753:431:5",
											"statements": [
												{
													"nodeType": "YulVariableDeclaration",
													"src": "3767:54:5",
													"value": {
														"arguments": [
															{
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "3815:5:5"
															}
														],
														"functionName": {
															"name": "array_dataslot_t_string_storage",
															"nodeType": "YulIdentifier",
															"src": "3783:31:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "3783:38:5"
													},
													"variables": [
														{
															"name": "dataArea",
															"nodeType": "YulTypedName",
															"src": "3771:8:5",
															"type": ""
														}
													]
												},
												{
													"nodeType": "YulVariableDeclaration",
													"src": "3834:63:5",
													"value": {
														"arguments": [
															{
																"name": "dataArea",
																"nodeType": "YulIdentifier",
																"src": "3857:8:5"
															},
															{
																"arguments": [
																	{
																		"name": "startIndex",
																		"nodeType": "YulIdentifier",
																		"src": "3885:10:5"
																	}
																],
																"functionName": {
																	"name": "divide_by_32_ceil",
																	"nodeType": "YulIdentifier",
																	"src": "3867:17:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "3867:29:5"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "3853:3:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "3853:44:5"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nodeType": "YulTypedName",
															"src": "3838:11:5",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nodeType": "YulBlock",
														"src": "4054:27:5",
														"statements": [
															{
																"nodeType": "YulAssignment",
																"src": "4056:23:5",
																"value": {
																	"name": "dataArea",
																	"nodeType": "YulIdentifier",
																	"src": "4071:8:5"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nodeType": "YulIdentifier",
																		"src": "4056:11:5"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nodeType": "YulIdentifier",
																"src": "4038:10:5"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4050:2:5",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "lt",
															"nodeType": "YulIdentifier",
															"src": "4035:2:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "4035:18:5"
													},
													"nodeType": "YulIf",
													"src": "4032:49:5"
												},
												{
													"expression": {
														"arguments": [
															{
																"name": "deleteStart",
																"nodeType": "YulIdentifier",
																"src": "4123:11:5"
															},
															{
																"arguments": [
																	{
																		"name": "dataArea",
																		"nodeType": "YulIdentifier",
																		"src": "4140:8:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "4168:3:5"
																			}
																		],
																		"functionName": {
																			"name": "divide_by_32_ceil",
																			"nodeType": "YulIdentifier",
																			"src": "4150:17:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4150:22:5"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4136:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "4136:37:5"
															}
														],
														"functionName": {
															"name": "clear_storage_range_t_bytes1",
															"nodeType": "YulIdentifier",
															"src": "4094:28:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "4094:80:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4094:80:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nodeType": "YulIdentifier",
													"src": "3744:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3749:2:5",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "3741:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3741:11:5"
										},
										"nodeType": "YulIf",
										"src": "3738:446:5"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_t_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nodeType": "YulTypedName",
									"src": "3703:5:5",
									"type": ""
								},
								{
									"name": "len",
									"nodeType": "YulTypedName",
									"src": "3710:3:5",
									"type": ""
								},
								{
									"name": "startIndex",
									"nodeType": "YulTypedName",
									"src": "3715:10:5",
									"type": ""
								}
							],
							"src": "3648:543:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4260:54:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4270:37:5",
										"value": {
											"arguments": [
												{
													"name": "bits",
													"nodeType": "YulIdentifier",
													"src": "4295:4:5"
												},
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "4301:5:5"
												}
											],
											"functionName": {
												"name": "shr",
												"nodeType": "YulIdentifier",
												"src": "4291:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4291:16:5"
										},
										"variableNames": [
											{
												"name": "newValue",
												"nodeType": "YulIdentifier",
												"src": "4270:8:5"
											}
										]
									}
								]
							},
							"name": "shift_right_unsigned_dynamic",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "bits",
									"nodeType": "YulTypedName",
									"src": "4235:4:5",
									"type": ""
								},
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "4241:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "newValue",
									"nodeType": "YulTypedName",
									"src": "4251:8:5",
									"type": ""
								}
							],
							"src": "4197:117:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4371:118:5",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4381:68:5",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4430:1:5",
																	"type": "",
																	"value": "8"
																},
																{
																	"name": "bytes",
																	"nodeType": "YulIdentifier",
																	"src": "4433:5:5"
																}
															],
															"functionName": {
																"name": "mul",
																"nodeType": "YulIdentifier",
																"src": "4426:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "4426:13:5"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nodeType": "YulLiteral",
																	"src": "4445:1:5",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nodeType": "YulIdentifier",
																"src": "4441:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "4441:6:5"
														}
													],
													"functionName": {
														"name": "shift_right_unsigned_dynamic",
														"nodeType": "YulIdentifier",
														"src": "4397:28:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "4397:51:5"
												}
											],
											"functionName": {
												"name": "not",
												"nodeType": "YulIdentifier",
												"src": "4393:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4393:56:5"
										},
										"variables": [
											{
												"name": "mask",
												"nodeType": "YulTypedName",
												"src": "4385:4:5",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "4458:25:5",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "4472:4:5"
												},
												{
													"name": "mask",
													"nodeType": "YulIdentifier",
													"src": "4478:4:5"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "4468:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4468:15:5"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "4458:6:5"
											}
										]
									}
								]
							},
							"name": "mask_bytes_dynamic",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "4348:4:5",
									"type": ""
								},
								{
									"name": "bytes",
									"nodeType": "YulTypedName",
									"src": "4354:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "4364:6:5",
									"type": ""
								}
							],
							"src": "4320:169:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4575:214:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4708:37:5",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "4735:4:5"
												},
												{
													"name": "len",
													"nodeType": "YulIdentifier",
													"src": "4741:3:5"
												}
											],
											"functionName": {
												"name": "mask_bytes_dynamic",
												"nodeType": "YulIdentifier",
												"src": "4716:18:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4716:29:5"
										},
										"variableNames": [
											{
												"name": "data",
												"nodeType": "YulIdentifier",
												"src": "4708:4:5"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "4754:29:5",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "4765:4:5"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4775:1:5",
															"type": "",
															"value": "2"
														},
														{
															"name": "len",
															"nodeType": "YulIdentifier",
															"src": "4778:3:5"
														}
													],
													"functionName": {
														"name": "mul",
														"nodeType": "YulIdentifier",
														"src": "4771:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "4771:11:5"
												}
											],
											"functionName": {
												"name": "or",
												"nodeType": "YulIdentifier",
												"src": "4762:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4762:21:5"
										},
										"variableNames": [
											{
												"name": "used",
												"nodeType": "YulIdentifier",
												"src": "4754:4:5"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "4556:4:5",
									"type": ""
								},
								{
									"name": "len",
									"nodeType": "YulTypedName",
									"src": "4562:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nodeType": "YulTypedName",
									"src": "4570:4:5",
									"type": ""
								}
							],
							"src": "4494:295:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4886:1303:5",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "4897:51:5",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nodeType": "YulIdentifier",
													"src": "4944:3:5"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "4911:32:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4911:37:5"
										},
										"variables": [
											{
												"name": "newLen",
												"nodeType": "YulTypedName",
												"src": "4901:6:5",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "5033:22:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nodeType": "YulIdentifier",
															"src": "5035:16:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "5035:18:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5035:18:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "5005:6:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5013:18:5",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "5002:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5002:30:5"
										},
										"nodeType": "YulIf",
										"src": "4999:56:5"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5065:52:5",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "slot",
															"nodeType": "YulIdentifier",
															"src": "5111:4:5"
														}
													],
													"functionName": {
														"name": "sload",
														"nodeType": "YulIdentifier",
														"src": "5105:5:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "5105:11:5"
												}
											],
											"functionName": {
												"name": "extract_byte_array_length",
												"nodeType": "YulIdentifier",
												"src": "5079:25:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5079:38:5"
										},
										"variables": [
											{
												"name": "oldLen",
												"nodeType": "YulTypedName",
												"src": "5069:6:5",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nodeType": "YulIdentifier",
													"src": "5210:4:5"
												},
												{
													"name": "oldLen",
													"nodeType": "YulIdentifier",
													"src": "5216:6:5"
												},
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "5224:6:5"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nodeType": "YulIdentifier",
												"src": "5164:45:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5164:67:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5164:67:5"
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5241:18:5",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "5258:1:5",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nodeType": "YulTypedName",
												"src": "5245:9:5",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "5269:17:5",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "5282:4:5",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nodeType": "YulIdentifier",
												"src": "5269:9:5"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5333:611:5",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5347:37:5",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "5366:6:5"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5378:4:5",
																				"type": "",
																				"value": "0x1f"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5374:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5374:9:5"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5362:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5362:22:5"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nodeType": "YulTypedName",
																	"src": "5351:7:5",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5398:51:5",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "5444:4:5"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "5412:31:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5412:37:5"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nodeType": "YulTypedName",
																	"src": "5402:6:5",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5462:10:5",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5471:1:5",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "5466:1:5",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5530:163:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "5555:6:5"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "5573:3:5"
																								},
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "5578:9:5"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "5569:3:5"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5569:19:5"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "5563:5:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5563:26:5"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nodeType": "YulIdentifier",
																				"src": "5548:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5548:42:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5548:42:5"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "5607:24:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "5621:6:5"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5629:1:5",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5617:3:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5617:14:5"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5607:6:5"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "5648:31:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nodeType": "YulIdentifier",
																					"src": "5665:9:5"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5676:2:5",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5661:3:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5661:18:5"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nodeType": "YulIdentifier",
																				"src": "5648:9:5"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "5496:1:5"
																	},
																	{
																		"name": "loopEnd",
																		"nodeType": "YulIdentifier",
																		"src": "5499:7:5"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5493:2:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5493:14:5"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "5508:21:5",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5510:17:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "5519:1:5"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5522:4:5",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "5515:3:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5515:12:5"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "5510:1:5"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "5489:3:5",
																"statements": []
															},
															"src": "5485:208:5"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5729:156:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "5747:43:5",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "5774:3:5"
																						},
																						{
																							"name": "srcOffset",
																							"nodeType": "YulIdentifier",
																							"src": "5779:9:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5770:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5770:19:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "5764:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5764:26:5"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nodeType": "YulTypedName",
																				"src": "5751:9:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nodeType": "YulIdentifier",
																					"src": "5814:6:5"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nodeType": "YulIdentifier",
																							"src": "5841:9:5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "5856:6:5"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "5864:4:5",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "5852:3:5"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5852:17:5"
																						}
																					],
																					"functionName": {
																						"name": "mask_bytes_dynamic",
																						"nodeType": "YulIdentifier",
																						"src": "5822:18:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5822:48:5"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nodeType": "YulIdentifier",
																				"src": "5807:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5807:64:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5807:64:5"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nodeType": "YulIdentifier",
																		"src": "5712:7:5"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "5721:6:5"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "5709:2:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5709:19:5"
															},
															"nodeType": "YulIf",
															"src": "5706:179:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "5905:4:5"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "newLen",
																						"nodeType": "YulIdentifier",
																						"src": "5919:6:5"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5927:1:5",
																						"type": "",
																						"value": "2"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "5915:3:5"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5915:14:5"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5931:1:5",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5911:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5911:22:5"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "5898:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "5898:36:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5898:36:5"
														}
													]
												},
												"nodeType": "YulCase",
												"src": "5326:618:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5331:1:5",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5961:222:5",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5975:14:5",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5988:1:5",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5979:5:5",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6012:67:5",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6030:35:5",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "6049:3:5"
																						},
																						{
																							"name": "srcOffset",
																							"nodeType": "YulIdentifier",
																							"src": "6054:9:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6045:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6045:19:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "6039:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6039:26:5"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6030:5:5"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nodeType": "YulIdentifier",
																"src": "6005:6:5"
															},
															"nodeType": "YulIf",
															"src": "6002:77:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "6099:4:5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6158:5:5"
																			},
																			{
																				"name": "newLen",
																				"nodeType": "YulIdentifier",
																				"src": "6165:6:5"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nodeType": "YulIdentifier",
																			"src": "6105:52:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6105:67:5"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "6092:6:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "6092:81:5"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6092:81:5"
														}
													]
												},
												"nodeType": "YulCase",
												"src": "5953:230:5",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nodeType": "YulIdentifier",
													"src": "5306:6:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5314:2:5",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "5303:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5303:14:5"
										},
										"nodeType": "YulSwitch",
										"src": "5296:887:5"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nodeType": "YulTypedName",
									"src": "4875:4:5",
									"type": ""
								},
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "4881:3:5",
									"type": ""
								}
							],
							"src": "4794:1395:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6223:152:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6240:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6243:77:5",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6233:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6233:88:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6233:88:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6337:1:5",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6340:4:5",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6330:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6330:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6330:15:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6361:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6364:4:5",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "6354:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6354:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6354:15:5"
									}
								]
							},
							"name": "panic_error_0x11",
							"nodeType": "YulFunctionDefinition",
							"src": "6195:180:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6429:362:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6439:25:5",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6462:1:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6444:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6444:20:5"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "6439:1:5"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6473:25:5",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6496:1:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6478:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6478:20:5"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "6473:1:5"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "6507:28:5",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6530:1:5"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6533:1:5"
												}
											],
											"functionName": {
												"name": "mul",
												"nodeType": "YulIdentifier",
												"src": "6526:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6526:9:5"
										},
										"variables": [
											{
												"name": "product_raw",
												"nodeType": "YulTypedName",
												"src": "6511:11:5",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6544:41:5",
										"value": {
											"arguments": [
												{
													"name": "product_raw",
													"nodeType": "YulIdentifier",
													"src": "6573:11:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6555:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6555:30:5"
										},
										"variableNames": [
											{
												"name": "product",
												"nodeType": "YulIdentifier",
												"src": "6544:7:5"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6762:22:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "6764:16:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "6764:18:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6764:18:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6695:1:5"
																}
															],
															"functionName": {
																"name": "iszero",
																"nodeType": "YulIdentifier",
																"src": "6688:6:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "6688:9:5"
														},
														{
															"arguments": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "6718:1:5"
																},
																{
																	"arguments": [
																		{
																			"name": "product",
																			"nodeType": "YulIdentifier",
																			"src": "6725:7:5"
																		},
																		{
																			"name": "x",
																			"nodeType": "YulIdentifier",
																			"src": "6734:1:5"
																		}
																	],
																	"functionName": {
																		"name": "div",
																		"nodeType": "YulIdentifier",
																		"src": "6721:3:5"
																	},
																	"nodeType": "YulFunctionCall",
																	"src": "6721:15:5"
																}
															],
															"functionName": {
																"name": "eq",
																"nodeType": "YulIdentifier",
																"src": "6715:2:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "6715:22:5"
														}
													],
													"functionName": {
														"name": "or",
														"nodeType": "YulIdentifier",
														"src": "6668:2:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "6668:83:5"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "6648:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6648:113:5"
										},
										"nodeType": "YulIf",
										"src": "6645:139:5"
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "6412:1:5",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "6415:1:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nodeType": "YulTypedName",
									"src": "6421:7:5",
									"type": ""
								}
							],
							"src": "6381:410:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6893:73:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "6910:3:5"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "6915:6:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6903:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6903:19:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6903:19:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "6931:29:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "6950:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6955:4:5",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6946:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6946:14:5"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "6931:11:5"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "6865:3:5",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "6870:6:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "6881:11:5",
									"type": ""
								}
							],
							"src": "6797:169:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7078:75:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "7100:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7108:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7096:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "7096:14:5"
												},
												{
													"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "7112:33:5",
													"type": "",
													"value": "ERC20: mint to the zero address"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7089:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7089:57:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7089:57:5"
									}
								]
							},
							"name": "store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "7070:6:5",
									"type": ""
								}
							],
							"src": "6972:181:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7305:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7315:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7381:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7386:2:5",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7322:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7322:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "7315:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7487:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
												"nodeType": "YulIdentifier",
												"src": "7398:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7398:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7398:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7500:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7511:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7516:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "7507:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7507:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "7500:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "7293:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "7301:3:5",
									"type": ""
								}
							],
							"src": "7159:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7702:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7712:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "7724:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7735:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "7720:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7720:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7712:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7759:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7770:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7755:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "7755:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "7778:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7784:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "7774:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "7774:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7748:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7748:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7748:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7804:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "7938:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7812:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7812:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7804:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "7682:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "7697:4:5",
									"type": ""
								}
							],
							"src": "7531:419:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8000:147:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8010:25:5",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "8033:1:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "8015:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8015:20:5"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "8010:1:5"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "8044:25:5",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "8067:1:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "8049:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8049:20:5"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "8044:1:5"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "8078:16:5",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "8089:1:5"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "8092:1:5"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8085:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8085:9:5"
										},
										"variableNames": [
											{
												"name": "sum",
												"nodeType": "YulIdentifier",
												"src": "8078:3:5"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "8118:22:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "8120:16:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "8120:18:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "8120:18:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "8110:1:5"
												},
												{
													"name": "sum",
													"nodeType": "YulIdentifier",
													"src": "8113:3:5"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "8107:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8107:10:5"
										},
										"nodeType": "YulIf",
										"src": "8104:36:5"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "7987:1:5",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "7990:1:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nodeType": "YulTypedName",
									"src": "7996:3:5",
									"type": ""
								}
							],
							"src": "7956:191:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8218:53:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "8235:3:5"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "8258:5:5"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "8240:17:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "8240:24:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8228:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8228:37:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8228:37:5"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "8206:5:5",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "8213:3:5",
									"type": ""
								}
							],
							"src": "8153:118:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8375:124:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8385:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "8397:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8408:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8393:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8393:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8385:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "8465:6:5"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8478:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8489:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8474:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "8474:17:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "8421:43:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8421:71:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8421:71:5"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "8347:9:5",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "8359:6:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "8370:4:5",
									"type": ""
								}
							],
							"src": "8277:222:5"
						}
					]
				},
				"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
				"id": 5,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1BD5 CODESIZE SUB DUP1 PUSH3 0x1BD5 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x2B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5374616B6564204E454152000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x73744E4541520000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0xB4 SWAP2 SWAP1 PUSH3 0x552 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH3 0xC6 SWAP2 SWAP1 PUSH3 0x552 JUMP JUMPDEST POP POP POP PUSH3 0xF2 CALLER PUSH10 0xD3C21BCECCEDA1000000 DUP4 PUSH3 0xE6 SWAP2 SWAP1 PUSH3 0x668 JUMP JUMPDEST PUSH3 0xF9 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x79F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x16B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x162 SWAP1 PUSH3 0x714 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x17F PUSH1 0x0 DUP4 DUP4 PUSH3 0x266 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x193 SWAP2 SWAP1 PUSH3 0x736 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x246 SWAP2 SWAP1 PUSH3 0x782 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 0x262 PUSH1 0x0 DUP4 DUP4 PUSH3 0x26B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x28A DUP2 PUSH3 0x275 JUMP JUMPDEST DUP2 EQ PUSH3 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x2AA DUP2 PUSH3 0x27F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2C9 JUMPI PUSH3 0x2C8 PUSH3 0x270 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x2D9 DUP5 DUP3 DUP6 ADD PUSH3 0x299 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x364 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x37A JUMPI PUSH3 0x379 PUSH3 0x31C JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x3E4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x3A5 JUMP JUMPDEST PUSH3 0x3F0 DUP7 DUP4 PUSH3 0x3A5 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x433 PUSH3 0x42D PUSH3 0x427 DUP5 PUSH3 0x275 JUMP JUMPDEST PUSH3 0x408 JUMP JUMPDEST PUSH3 0x275 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x44F DUP4 PUSH3 0x412 JUMP JUMPDEST PUSH3 0x467 PUSH3 0x45E DUP3 PUSH3 0x43A JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x3B2 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x47E PUSH3 0x46F JUMP JUMPDEST PUSH3 0x48B DUP2 DUP5 DUP5 PUSH3 0x444 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x4B3 JUMPI PUSH3 0x4A7 PUSH1 0x0 DUP3 PUSH3 0x474 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x491 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x502 JUMPI PUSH3 0x4CC DUP2 PUSH3 0x380 JUMP JUMPDEST PUSH3 0x4D7 DUP5 PUSH3 0x395 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x4E7 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x4FF PUSH3 0x4F6 DUP6 PUSH3 0x395 JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x490 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x527 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x507 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x542 DUP4 DUP4 PUSH3 0x514 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x55D DUP3 PUSH3 0x2E2 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x579 JUMPI PUSH3 0x578 PUSH3 0x2ED JUMP JUMPDEST JUMPDEST PUSH3 0x585 DUP3 SLOAD PUSH3 0x34B JUMP JUMPDEST PUSH3 0x592 DUP3 DUP3 DUP6 PUSH3 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x5CA JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x5B5 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x5C1 DUP6 DUP3 PUSH3 0x534 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x631 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x5DA DUP7 PUSH3 0x380 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x604 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x5DD JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x624 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x620 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x514 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x675 DUP3 PUSH3 0x275 JUMP JUMPDEST SWAP2 POP PUSH3 0x682 DUP4 PUSH3 0x275 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH3 0x692 DUP2 PUSH3 0x275 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH3 0x6AC JUMPI PUSH3 0x6AB PUSH3 0x639 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6FC PUSH1 0x1F DUP4 PUSH3 0x6B3 JUMP JUMPDEST SWAP2 POP PUSH3 0x709 DUP3 PUSH3 0x6C4 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x72F DUP2 PUSH3 0x6ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x743 DUP3 PUSH3 0x275 JUMP JUMPDEST SWAP2 POP PUSH3 0x750 DUP4 PUSH3 0x275 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x76B JUMPI PUSH3 0x76A PUSH3 0x639 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x77C DUP2 PUSH3 0x275 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x799 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x771 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1426 DUP1 PUSH3 0x7AF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x40C10F19 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x26D JUMPI PUSH2 0xB4 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x173 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xEC SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFE SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10F PUSH2 0x352 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11C SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x35C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14C SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15D PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16A SWAP2 SWAP1 PUSH2 0xE61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x188 SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x394 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19A SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x3CB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E6 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F7 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x204 SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x227 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x222 SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x257 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x252 SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x287 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x282 SWAP2 SWAP1 PUSH2 0xEA9 JUMP JUMPDEST PUSH2 0x54D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x294 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D8 SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x325 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x325 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x308 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x33A PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x347 DUP2 DUP6 DUP6 PUSH2 0x5DC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x367 PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x374 DUP6 DUP3 DUP6 PUSH2 0x7A5 JUMP JUMPDEST PUSH2 0x37F DUP6 DUP6 DUP6 PUSH2 0x831 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x18 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x39F PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x3C0 DUP2 DUP6 DUP6 PUSH2 0x3B1 DUP6 DUP10 PUSH2 0x54D JUMP JUMPDEST PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0xF78 JUMP JUMPDEST PUSH2 0x5DC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D5 DUP3 DUP3 PUSH2 0xAA7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x430 SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x45C SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4A9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x47E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4A9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x48C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4BE PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4CC DUP3 DUP7 PUSH2 0x54D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x511 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x508 SWAP1 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x51E DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5DC JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x535 PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x542 DUP2 DUP6 DUP6 PUSH2 0x831 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x64B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x642 SWAP1 PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B1 SWAP1 PUSH2 0x1142 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x798 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B1 DUP5 DUP5 PUSH2 0x54D JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x82B JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x81D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x814 SWAP1 PUSH2 0x11AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x82A DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5DC JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x897 SWAP1 PUSH2 0x1240 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x90F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x906 SWAP1 PUSH2 0x12D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x91A DUP4 DUP4 DUP4 PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x997 SWAP1 PUSH2 0x1364 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xAA1 DUP5 DUP5 DUP5 PUSH2 0xC02 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB16 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB0D SWAP1 PUSH2 0x13D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB22 PUSH1 0x0 DUP4 DUP4 PUSH2 0xBFD JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB34 SWAP2 SWAP1 PUSH2 0xF78 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xBE5 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xBF9 PUSH1 0x0 DUP4 DUP4 PUSH2 0xC02 JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC41 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC69 DUP3 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0xC73 DUP2 DUP6 PUSH2 0xC12 JUMP JUMPDEST SWAP4 POP PUSH2 0xC83 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC8C DUP2 PUSH2 0xC4D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCB1 DUP2 DUP5 PUSH2 0xC5E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE9 DUP3 PUSH2 0xCBE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCF9 DUP2 PUSH2 0xCDE JUMP JUMPDEST DUP2 EQ PUSH2 0xD04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD16 DUP2 PUSH2 0xCF0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD2F DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP2 EQ PUSH2 0xD3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD4C DUP2 PUSH2 0xD26 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD69 JUMPI PUSH2 0xD68 PUSH2 0xCB9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD77 DUP6 DUP3 DUP7 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD88 DUP6 DUP3 DUP7 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA7 DUP2 PUSH2 0xD92 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDC2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDD1 DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDEC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE0B JUMPI PUSH2 0xE0A PUSH2 0xCB9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE19 DUP7 DUP3 DUP8 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xE2A DUP7 DUP3 DUP8 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xE3B DUP7 DUP3 DUP8 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE5B DUP2 PUSH2 0xE45 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE76 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE52 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE92 JUMPI PUSH2 0xE91 PUSH2 0xCB9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA0 DUP5 DUP3 DUP6 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEC0 JUMPI PUSH2 0xEBF PUSH2 0xCB9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xECE DUP6 DUP3 DUP7 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEDF DUP6 DUP3 DUP7 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF30 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF43 JUMPI PUSH2 0xF42 PUSH2 0xEE9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF83 DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0xF8E DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xFA6 JUMPI PUSH2 0xFA5 PUSH2 0xF49 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1008 PUSH1 0x25 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x1013 DUP3 PUSH2 0xFAC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1037 DUP2 PUSH2 0xFFB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109A PUSH1 0x24 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x10A5 DUP3 PUSH2 0x103E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10C9 DUP2 PUSH2 0x108D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x112C PUSH1 0x22 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x1137 DUP3 PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x115B DUP2 PUSH2 0x111F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1198 PUSH1 0x1D DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x11A3 DUP3 PUSH2 0x1162 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C7 DUP2 PUSH2 0x118B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x122A PUSH1 0x25 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x1235 DUP3 PUSH2 0x11CE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1259 DUP2 PUSH2 0x121D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12BC PUSH1 0x23 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x12C7 DUP3 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12EB DUP2 PUSH2 0x12AF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x134E PUSH1 0x26 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x1359 DUP3 PUSH2 0x12F2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x137D DUP2 PUSH2 0x1341 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13BA PUSH1 0x1F DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x13C5 DUP3 PUSH2 0x1384 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13E9 DUP2 PUSH2 0x13AD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xA7 0xE6 BALANCE 0xC1 0xE3 ISZERO PUSH10 0xEB6A8EEEC94950BC310D CREATE PUSH2 0x363E BYTE 0xA8 SUB 0xB3 PUSH26 0xFBE904664C64736F6C6343000812003300000000000000000000 ",
		"sourceMap": "119:357:4:-:0;;;151:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1980:113:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2054:5;2046;:13;;;;;;:::i;:::-;;2079:7;2069;:17;;;;;;:::i;:::-;;1980:113;;228:43:4::1;234:10;262:8;246:13;:24;;;;:::i;:::-;228:5;;;:43;;:::i;:::-;151:128:::0;119:357;;8520:535:0;8622:1;8603:21;;:7;:21;;;8595:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8671:49;8700:1;8704:7;8713:6;8671:20;;;:49;;:::i;:::-;8747:6;8731:12;;:22;;;;;;;:::i;:::-;;;;;;;;8921:6;8899:9;:18;8909:7;8899:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;8973:7;8952:37;;8969:1;8952:37;;;8982:6;8952:37;;;;;;:::i;:::-;;;;;;;;9000:48;9028:1;9032:7;9041:6;9000:19;;;:48;;:::i;:::-;8520:535;;:::o;12073:91::-;;;;:::o;12752:90::-;;;;:::o;88:117:5:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:143::-;602:5;633:6;627:13;618:22;;649:33;676:5;649:33;:::i;:::-;545:143;;;;:::o;694:351::-;764:6;813:2;801:9;792:7;788:23;784:32;781:119;;;819:79;;:::i;:::-;781:119;939:1;964:64;1020:7;1011:6;1000:9;996:22;964:64;:::i;:::-;954:74;;910:128;694:351;;;;:::o;1051:99::-;1103:6;1137:5;1131:12;1121:22;;1051:99;;;:::o;1156:180::-;1204:77;1201:1;1194:88;1301:4;1298:1;1291:15;1325:4;1322:1;1315:15;1342:180;1390:77;1387:1;1380:88;1487:4;1484:1;1477:15;1511:4;1508:1;1501:15;1528:320;1572:6;1609:1;1603:4;1599:12;1589:22;;1656:1;1650:4;1646:12;1677:18;1667:81;;1733:4;1725:6;1721:17;1711:27;;1667:81;1795:2;1787:6;1784:14;1764:18;1761:38;1758:84;;1814:18;;:::i;:::-;1758:84;1579:269;1528:320;;;:::o;1854:141::-;1903:4;1926:3;1918:11;;1949:3;1946:1;1939:14;1983:4;1980:1;1970:18;1962:26;;1854:141;;;:::o;2001:93::-;2038:6;2085:2;2080;2073:5;2069:14;2065:23;2055:33;;2001:93;;;:::o;2100:107::-;2144:8;2194:5;2188:4;2184:16;2163:37;;2100:107;;;;:::o;2213:393::-;2282:6;2332:1;2320:10;2316:18;2355:97;2385:66;2374:9;2355:97;:::i;:::-;2473:39;2503:8;2492:9;2473:39;:::i;:::-;2461:51;;2545:4;2541:9;2534:5;2530:21;2521:30;;2594:4;2584:8;2580:19;2573:5;2570:30;2560:40;;2289:317;;2213:393;;;;;:::o;2612:60::-;2640:3;2661:5;2654:12;;2612:60;;;:::o;2678:142::-;2728:9;2761:53;2779:34;2788:24;2806:5;2788:24;:::i;:::-;2779:34;:::i;:::-;2761:53;:::i;:::-;2748:66;;2678:142;;;:::o;2826:75::-;2869:3;2890:5;2883:12;;2826:75;;;:::o;2907:269::-;3017:39;3048:7;3017:39;:::i;:::-;3078:91;3127:41;3151:16;3127:41;:::i;:::-;3119:6;3112:4;3106:11;3078:91;:::i;:::-;3072:4;3065:105;2983:193;2907:269;;;:::o;3182:73::-;3227:3;3182:73;:::o;3261:189::-;3338:32;;:::i;:::-;3379:65;3437:6;3429;3423:4;3379:65;:::i;:::-;3314:136;3261:189;;:::o;3456:186::-;3516:120;3533:3;3526:5;3523:14;3516:120;;;3587:39;3624:1;3617:5;3587:39;:::i;:::-;3560:1;3553:5;3549:13;3540:22;;3516:120;;;3456:186;;:::o;3648:543::-;3749:2;3744:3;3741:11;3738:446;;;3783:38;3815:5;3783:38;:::i;:::-;3867:29;3885:10;3867:29;:::i;:::-;3857:8;3853:44;4050:2;4038:10;4035:18;4032:49;;;4071:8;4056:23;;4032:49;4094:80;4150:22;4168:3;4150:22;:::i;:::-;4140:8;4136:37;4123:11;4094:80;:::i;:::-;3753:431;;3738:446;3648:543;;;:::o;4197:117::-;4251:8;4301:5;4295:4;4291:16;4270:37;;4197:117;;;;:::o;4320:169::-;4364:6;4397:51;4445:1;4441:6;4433:5;4430:1;4426:13;4397:51;:::i;:::-;4393:56;4478:4;4472;4468:15;4458:25;;4371:118;4320:169;;;;:::o;4494:295::-;4570:4;4716:29;4741:3;4735:4;4716:29;:::i;:::-;4708:37;;4778:3;4775:1;4771:11;4765:4;4762:21;4754:29;;4494:295;;;;:::o;4794:1395::-;4911:37;4944:3;4911:37;:::i;:::-;5013:18;5005:6;5002:30;4999:56;;;5035:18;;:::i;:::-;4999:56;5079:38;5111:4;5105:11;5079:38;:::i;:::-;5164:67;5224:6;5216;5210:4;5164:67;:::i;:::-;5258:1;5282:4;5269:17;;5314:2;5306:6;5303:14;5331:1;5326:618;;;;5988:1;6005:6;6002:77;;;6054:9;6049:3;6045:19;6039:26;6030:35;;6002:77;6105:67;6165:6;6158:5;6105:67;:::i;:::-;6099:4;6092:81;5961:222;5296:887;;5326:618;5378:4;5374:9;5366:6;5362:22;5412:37;5444:4;5412:37;:::i;:::-;5471:1;5485:208;5499:7;5496:1;5493:14;5485:208;;;5578:9;5573:3;5569:19;5563:26;5555:6;5548:42;5629:1;5621:6;5617:14;5607:24;;5676:2;5665:9;5661:18;5648:31;;5522:4;5519:1;5515:12;5510:17;;5485:208;;;5721:6;5712:7;5709:19;5706:179;;;5779:9;5774:3;5770:19;5764:26;5822:48;5864:4;5856:6;5852:17;5841:9;5822:48;:::i;:::-;5814:6;5807:64;5729:156;5706:179;5931:1;5927;5919:6;5915:14;5911:22;5905:4;5898:36;5333:611;;;5296:887;;4886:1303;;;4794:1395;;:::o;6195:180::-;6243:77;6240:1;6233:88;6340:4;6337:1;6330:15;6364:4;6361:1;6354:15;6381:410;6421:7;6444:20;6462:1;6444:20;:::i;:::-;6439:25;;6478:20;6496:1;6478:20;:::i;:::-;6473:25;;6533:1;6530;6526:9;6555:30;6573:11;6555:30;:::i;:::-;6544:41;;6734:1;6725:7;6721:15;6718:1;6715:22;6695:1;6688:9;6668:83;6645:139;;6764:18;;:::i;:::-;6645:139;6429:362;6381:410;;;;:::o;6797:169::-;6881:11;6915:6;6910:3;6903:19;6955:4;6950:3;6946:14;6931:29;;6797:169;;;;:::o;6972:181::-;7112:33;7108:1;7100:6;7096:14;7089:57;6972:181;:::o;7159:366::-;7301:3;7322:67;7386:2;7381:3;7322:67;:::i;:::-;7315:74;;7398:93;7487:3;7398:93;:::i;:::-;7516:2;7511:3;7507:12;7500:19;;7159:366;;;:::o;7531:419::-;7697:4;7735:2;7724:9;7720:18;7712:26;;7784:9;7778:4;7774:20;7770:1;7759:9;7755:17;7748:47;7812:131;7938:4;7812:131;:::i;:::-;7804:139;;7531:419;;;:::o;7956:191::-;7996:3;8015:20;8033:1;8015:20;:::i;:::-;8010:25;;8049:20;8067:1;8049:20;:::i;:::-;8044:25;;8092:1;8089;8085:9;8078:16;;8113:3;8110:1;8107:10;8104:36;;;8120:18;;:::i;:::-;8104:36;7956:191;;;;:::o;8153:118::-;8240:24;8258:5;8240:24;:::i;:::-;8235:3;8228:37;8153:118;;:::o;8277:222::-;8370:4;8408:2;8397:9;8393:18;8385:26;;8421:71;8489:1;8478:9;8474:17;8465:6;8421:71;:::i;:::-;8277:222;;;;:::o;119:357:4:-;;;;;;;"
	},
	"abi": [
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "initialSupply",
					"type": "uint256"
				}
			],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "allowance",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "decimals",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "subtractedValue",
					"type": "uint256"
				}
			],
			"name": "decreaseAllowance",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "addedValue",
					"type": "uint256"
				}
			],
			"name": "increaseAllowance",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "mint",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "amount",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [
			{
				"astId": 15,
				"contract": "mockstnear.sol:stNEAR",
				"label": "_balances",
				"offset": 0,
				"slot": "0",
				"type": "t_mapping(t_address,t_uint256)"
			},
			{
				"astId": 21,
				"contract": "mockstnear.sol:stNEAR",
				"label": "_allowances",
				"offset": 0,
				"slot": "1",
				"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
			},
			{
				"astId": 23,
				"contract": "mockstnear.sol:stNEAR",
				"label": "_totalSupply",
				"offset": 0,
				"slot": "2",
				"type": "t_uint256"
			},
			{
				"astId": 25,
				"contract": "mockstnear.sol:stNEAR",
				"label": "_name",
				"offset": 0,
				"slot": "3",
				"type": "t_string_storage"
			},
			{
				"astId": 27,
				"contract": "mockstnear.sol:stNEAR",
				"label": "_symbol",
				"offset": 0,
				"slot": "4",
				"type": "t_string_storage"
			}
		],
		"types": {
			"t_address": {
				"encoding": "inplace",
				"label": "address",
				"numberOfBytes": "20"
			},
			"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => mapping(address => uint256))",
				"numberOfBytes": "32",
				"value": "t_mapping(t_address,t_uint256)"
			},
			"t_mapping(t_address,t_uint256)": {
				"encoding": "mapping",
				"key": "t_address",
				"label": "mapping(address => uint256)",
				"numberOfBytes": "32",
				"value": "t_uint256"
			},
			"t_string_storage": {
				"encoding": "bytes",
				"label": "string",
				"numberOfBytes": "32"
			},
			"t_uint256": {
				"encoding": "inplace",
				"label": "uint256",
				"numberOfBytes": "32"
			}
		}
	},
	"web3Deploy": "var initialSupply = /* var of type uint256 here */ ;\nvar stnearContract = new web3.eth.Contract([{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]);\nvar stnear = stnearContract.deploy({\n     data: '0x60806040523480156200001157600080fd5b5060405162001bd538038062001bd58339818101604052810190620000379190620002b0565b6040518060400160405280600b81526020017f5374616b6564204e4541520000000000000000000000000000000000000000008152506040518060400160405280600681526020017f73744e45415200000000000000000000000000000000000000000000000000008152508160039081620000b4919062000552565b508060049081620000c6919062000552565b505050620000f23369d3c21bcecceda100000083620000e6919062000668565b620000f960201b60201c565b506200079f565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200016b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001629062000714565b60405180910390fd5b6200017f600083836200026660201b60201c565b806002600082825462000193919062000736565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000246919062000782565b60405180910390a362000262600083836200026b60201b60201c565b5050565b505050565b505050565b600080fd5b6000819050919050565b6200028a8162000275565b81146200029657600080fd5b50565b600081519050620002aa816200027f565b92915050565b600060208284031215620002c957620002c862000270565b5b6000620002d98482850162000299565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200036457607f821691505b6020821081036200037a57620003796200031c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003e47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003a5565b620003f08683620003a5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004336200042d620004278462000275565b62000408565b62000275565b9050919050565b6000819050919050565b6200044f8362000412565b620004676200045e826200043a565b848454620003b2565b825550505050565b600090565b6200047e6200046f565b6200048b81848462000444565b505050565b5b81811015620004b357620004a760008262000474565b60018101905062000491565b5050565b601f8211156200050257620004cc8162000380565b620004d78462000395565b81016020851015620004e7578190505b620004ff620004f68562000395565b83018262000490565b50505b505050565b600082821c905092915050565b6000620005276000198460080262000507565b1980831691505092915050565b600062000542838362000514565b9150826002028217905092915050565b6200055d82620002e2565b67ffffffffffffffff811115620005795762000578620002ed565b5b6200058582546200034b565b62000592828285620004b7565b600060209050601f831160018114620005ca5760008415620005b5578287015190505b620005c1858262000534565b86555062000631565b601f198416620005da8662000380565b60005b828110156200060457848901518255600182019150602085019450602081019050620005dd565b8683101562000624578489015162000620601f89168262000514565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620006758262000275565b9150620006828362000275565b9250828202620006928162000275565b91508282048414831517620006ac57620006ab62000639565b5b5092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620006fc601f83620006b3565b91506200070982620006c4565b602082019050919050565b600060208201905081810360008301526200072f81620006ed565b9050919050565b6000620007438262000275565b9150620007508362000275565b92508282019050808211156200076b576200076a62000639565b5b92915050565b6200077c8162000275565b82525050565b600060208201905062000799600083018462000771565b92915050565b61142680620007af6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806340c10f191161007157806340c10f19146101a357806370a08231146101bf57806395d89b41146101ef578063a457c2d71461020d578063a9059cbb1461023d578063dd62ed3e1461026d576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633950935114610173575b600080fd5b6100c161029d565b6040516100ce9190610c97565b60405180910390f35b6100f160048036038101906100ec9190610d52565b61032f565b6040516100fe9190610dad565b60405180910390f35b61010f610352565b60405161011c9190610dd7565b60405180910390f35b61013f600480360381019061013a9190610df2565b61035c565b60405161014c9190610dad565b60405180910390f35b61015d61038b565b60405161016a9190610e61565b60405180910390f35b61018d60048036038101906101889190610d52565b610394565b60405161019a9190610dad565b60405180910390f35b6101bd60048036038101906101b89190610d52565b6103cb565b005b6101d960048036038101906101d49190610e7c565b6103d9565b6040516101e69190610dd7565b60405180910390f35b6101f7610421565b6040516102049190610c97565b60405180910390f35b61022760048036038101906102229190610d52565b6104b3565b6040516102349190610dad565b60405180910390f35b61025760048036038101906102529190610d52565b61052a565b6040516102649190610dad565b60405180910390f35b61028760048036038101906102829190610ea9565b61054d565b6040516102949190610dd7565b60405180910390f35b6060600380546102ac90610f18565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890610f18565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b60008061033a6105d4565b90506103478185856105dc565b600191505092915050565b6000600254905090565b6000806103676105d4565b90506103748582856107a5565b61037f858585610831565b60019150509392505050565b60006018905090565b60008061039f6105d4565b90506103c08185856103b1858961054d565b6103bb9190610f78565b6105dc565b600191505092915050565b6103d58282610aa7565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461043090610f18565b80601f016020809104026020016040519081016040528092919081815260200182805461045c90610f18565b80156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b5050505050905090565b6000806104be6105d4565b905060006104cc828661054d565b905083811015610511576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105089061101e565b60405180910390fd5b61051e82868684036105dc565b60019250505092915050565b6000806105356105d4565b9050610542818585610831565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361064b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610642906110b0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b190611142565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107989190610dd7565b60405180910390a3505050565b60006107b1848461054d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461082b578181101561081d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610814906111ae565b60405180910390fd5b61082a84848484036105dc565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089790611240565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361090f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610906906112d2565b60405180910390fd5b61091a838383610bfd565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099790611364565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a8e9190610dd7565b60405180910390a3610aa1848484610c02565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0d906113d0565b60405180910390fd5b610b2260008383610bfd565b8060026000828254610b349190610f78565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610be59190610dd7565b60405180910390a3610bf960008383610c02565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c41578082015181840152602081019050610c26565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c6982610c07565b610c738185610c12565b9350610c83818560208601610c23565b610c8c81610c4d565b840191505092915050565b60006020820190508181036000830152610cb18184610c5e565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce982610cbe565b9050919050565b610cf981610cde565b8114610d0457600080fd5b50565b600081359050610d1681610cf0565b92915050565b6000819050919050565b610d2f81610d1c565b8114610d3a57600080fd5b50565b600081359050610d4c81610d26565b92915050565b60008060408385031215610d6957610d68610cb9565b5b6000610d7785828601610d07565b9250506020610d8885828601610d3d565b9150509250929050565b60008115159050919050565b610da781610d92565b82525050565b6000602082019050610dc26000830184610d9e565b92915050565b610dd181610d1c565b82525050565b6000602082019050610dec6000830184610dc8565b92915050565b600080600060608486031215610e0b57610e0a610cb9565b5b6000610e1986828701610d07565b9350506020610e2a86828701610d07565b9250506040610e3b86828701610d3d565b9150509250925092565b600060ff82169050919050565b610e5b81610e45565b82525050565b6000602082019050610e766000830184610e52565b92915050565b600060208284031215610e9257610e91610cb9565b5b6000610ea084828501610d07565b91505092915050565b60008060408385031215610ec057610ebf610cb9565b5b6000610ece85828601610d07565b9250506020610edf85828601610d07565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f3057607f821691505b602082108103610f4357610f42610ee9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f8382610d1c565b9150610f8e83610d1c565b9250828201905080821115610fa657610fa5610f49565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611008602583610c12565b915061101382610fac565b604082019050919050565b6000602082019050818103600083015261103781610ffb565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061109a602483610c12565b91506110a58261103e565b604082019050919050565b600060208201905081810360008301526110c98161108d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061112c602283610c12565b9150611137826110d0565b604082019050919050565b6000602082019050818103600083015261115b8161111f565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611198601d83610c12565b91506111a382611162565b602082019050919050565b600060208201905081810360008301526111c78161118b565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061122a602583610c12565b9150611235826111ce565b604082019050919050565b600060208201905081810360008301526112598161121d565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006112bc602383610c12565b91506112c782611260565b604082019050919050565b600060208201905081810360008301526112eb816112af565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061134e602683610c12565b9150611359826112f2565b604082019050919050565b6000602082019050818103600083015261137d81611341565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006113ba601f83610c12565b91506113c582611384565b602082019050919050565b600060208201905081810360008301526113e9816113ad565b905091905056fea2646970667358221220b7a7e631c1e31569eb6a8eeec94950bc310df061363e1aa803b379fbe904664c64736f6c63430008120033', \n     arguments: [\n          initialSupply,\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"functionHashes": {
		"39509351": "increaseAllowance(address,uint256)",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"313ce567": "decimals()",
		"a457c2d7": "decreaseAllowance(address,uint256)",
		"40c10f19": "mint(address,uint256)",
		"06fdde03": "name()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "1031600",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"allowance(address,address)": "infinite",
			"approve(address,uint256)": "infinite",
			"balanceOf(address)": "2863",
			"decimals()": "432",
			"decreaseAllowance(address,uint256)": "infinite",
			"increaseAllowance(address,uint256)": "infinite",
			"mint(address,uint256)": "infinite",
			"name()": "infinite",
			"symbol()": "infinite",
			"totalSupply()": "2482",
			"transfer(address,uint256)": "infinite",
			"transferFrom(address,address,uint256)": "infinite"
		}
	},
	"devdoc": {
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
			}
		},
		"kind": "dev",
		"methods": {
			"allowance(address,address)": {
				"details": "See {IERC20-allowance}."
			},
			"approve(address,uint256)": {
				"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
			},
			"balanceOf(address)": {
				"details": "See {IERC20-balanceOf}."
			},
			"decimals()": {
				"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
			},
			"decreaseAllowance(address,uint256)": {
				"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
			},
			"increaseAllowance(address,uint256)": {
				"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
			},
			"name()": {
				"details": "Returns the name of the token."
			},
			"symbol()": {
				"details": "Returns the symbol of the token, usually a shorter version of the name."
			},
			"totalSupply()": {
				"details": "See {IERC20-totalSupply}."
			},
			"transfer(address,uint256)": {
				"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
			},
			"transferFrom(address,address,uint256)": {
				"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@_afterTokenTransfer_585": {
				"entryPoint": 3074,
				"id": 585,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_520": {
				"entryPoint": 1500,
				"id": 520,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_beforeTokenTransfer_574": {
				"entryPoint": 3069,
				"id": 574,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_mint_403": {
				"entryPoint": 2727,
				"id": 403,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_msgSender_701": {
				"entryPoint": 1492,
				"id": 701,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_spendAllowance_563": {
				"entryPoint": 1957,
				"id": 563,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_transfer_346": {
				"entryPoint": 2097,
				"id": 346,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@allowance_141": {
				"entryPoint": 1357,
				"id": 141,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@approve_166": {
				"entryPoint": 815,
				"id": 166,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@balanceOf_98": {
				"entryPoint": 985,
				"id": 98,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@decimals_745": {
				"entryPoint": 907,
				"id": 745,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@decreaseAllowance_269": {
				"entryPoint": 1203,
				"id": 269,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@increaseAllowance_228": {
				"entryPoint": 916,
				"id": 228,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@mint_758": {
				"entryPoint": 971,
				"id": 758,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@name_54": {
				"entryPoint": 669,
				"id": 54,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@symbol_64": {
				"entryPoint": 1057,
				"id": 64,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@totalSupply_84": {
				"entryPoint": 850,
				"id": 84,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@transferFrom_199": {
				"entryPoint": 860,
				"id": 199,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@transfer_123": {
				"entryPoint": 1322,
				"id": 123,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_address": {
				"entryPoint": 3335,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_t_uint256": {
				"entryPoint": 3389,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 3708,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 3753,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 3570,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 3410,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_encode_t_bool_to_t_bool_fromStack": {
				"entryPoint": 3486,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 3166,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4783,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4383,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4491,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4929,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4637,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4237,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 4091,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack": {
				"entryPoint": 5037,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_t_uint256_to_t_uint256_fromStack": {
				"entryPoint": 3528,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_t_uint8_to_t_uint8_fromStack": {
				"entryPoint": 3666,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": 3501,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 3223,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4818,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4418,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4526,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4964,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4672,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4272,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 4126,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 5072,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": 3543,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
				"entryPoint": 3681,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"allocate_unbounded": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"array_length_t_string_memory_ptr": {
				"entryPoint": 3079,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
				"entryPoint": 3090,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 3960,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"cleanup_t_address": {
				"entryPoint": 3294,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_bool": {
				"entryPoint": 3474,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint160": {
				"entryPoint": 3262,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint256": {
				"entryPoint": 3356,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"cleanup_t_uint8": {
				"entryPoint": 3653,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"copy_memory_to_memory_with_cleanup": {
				"entryPoint": 3107,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 3864,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 3913,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x22": {
				"entryPoint": 3817,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
				"entryPoint": 3257,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"round_up_to_mul_of_32": {
				"entryPoint": 3149,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f": {
				"entryPoint": 4704,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029": {
				"entryPoint": 4304,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe": {
				"entryPoint": 4450,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6": {
				"entryPoint": 4850,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea": {
				"entryPoint": 4558,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208": {
				"entryPoint": 4158,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8": {
				"entryPoint": 4012,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e": {
				"entryPoint": 4996,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_address": {
				"entryPoint": 3312,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"validator_revert_t_uint256": {
				"entryPoint": 3366,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nodeType": "YulBlock",
					"src": "0:14683:5",
					"statements": [
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "66:40:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "77:22:5",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "93:5:5"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "87:5:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "87:12:5"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "77:6:5"
											}
										]
									}
								]
							},
							"name": "array_length_t_string_memory_ptr",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "49:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "59:6:5",
									"type": ""
								}
							],
							"src": "7:99:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "208:73:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "225:3:5"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "230:6:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "218:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "218:19:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "218:19:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "246:29:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "265:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "270:4:5",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "261:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "261:14:5"
										},
										"variableNames": [
											{
												"name": "updated_pos",
												"nodeType": "YulIdentifier",
												"src": "246:11:5"
											}
										]
									}
								]
							},
							"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "180:3:5",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "185:6:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "updated_pos",
									"nodeType": "YulTypedName",
									"src": "196:11:5",
									"type": ""
								}
							],
							"src": "112:169:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "349:184:5",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "359:10:5",
										"value": {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "368:1:5",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nodeType": "YulTypedName",
												"src": "363:1:5",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "428:63:5",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "dst",
																		"nodeType": "YulIdentifier",
																		"src": "453:3:5"
																	},
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "458:1:5"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "449:3:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "449:11:5"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "472:3:5"
																			},
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "477:1:5"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "468:3:5"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "468:11:5"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "462:5:5"
																},
																"nodeType": "YulFunctionCall",
																"src": "462:18:5"
															}
														],
														"functionName": {
															"name": "mstore",
															"nodeType": "YulIdentifier",
															"src": "442:6:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "442:39:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "442:39:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nodeType": "YulIdentifier",
													"src": "389:1:5"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "392:6:5"
												}
											],
											"functionName": {
												"name": "lt",
												"nodeType": "YulIdentifier",
												"src": "386:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "386:13:5"
										},
										"nodeType": "YulForLoop",
										"post": {
											"nodeType": "YulBlock",
											"src": "400:19:5",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "402:15:5",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nodeType": "YulIdentifier",
																"src": "411:1:5"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "414:2:5",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "add",
															"nodeType": "YulIdentifier",
															"src": "407:3:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "407:10:5"
													},
													"variableNames": [
														{
															"name": "i",
															"nodeType": "YulIdentifier",
															"src": "402:1:5"
														}
													]
												}
											]
										},
										"pre": {
											"nodeType": "YulBlock",
											"src": "382:3:5",
											"statements": []
										},
										"src": "378:113:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nodeType": "YulIdentifier",
															"src": "511:3:5"
														},
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "516:6:5"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "507:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "507:16:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "525:1:5",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "500:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "500:27:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "500:27:5"
									}
								]
							},
							"name": "copy_memory_to_memory_with_cleanup",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nodeType": "YulTypedName",
									"src": "331:3:5",
									"type": ""
								},
								{
									"name": "dst",
									"nodeType": "YulTypedName",
									"src": "336:3:5",
									"type": ""
								},
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "341:6:5",
									"type": ""
								}
							],
							"src": "287:246:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "587:54:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "597:38:5",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "615:5:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "622:2:5",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "611:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "611:14:5"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "631:2:5",
															"type": "",
															"value": "31"
														}
													],
													"functionName": {
														"name": "not",
														"nodeType": "YulIdentifier",
														"src": "627:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "627:7:5"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "607:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "607:28:5"
										},
										"variableNames": [
											{
												"name": "result",
												"nodeType": "YulIdentifier",
												"src": "597:6:5"
											}
										]
									}
								]
							},
							"name": "round_up_to_mul_of_32",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "570:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "result",
									"nodeType": "YulTypedName",
									"src": "580:6:5",
									"type": ""
								}
							],
							"src": "539:102:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "739:285:5",
								"statements": [
									{
										"nodeType": "YulVariableDeclaration",
										"src": "749:53:5",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "796:5:5"
												}
											],
											"functionName": {
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulIdentifier",
												"src": "763:32:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "763:39:5"
										},
										"variables": [
											{
												"name": "length",
												"nodeType": "YulTypedName",
												"src": "753:6:5",
												"type": ""
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "811:78:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "877:3:5"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "882:6:5"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "818:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "818:71:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "811:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "937:5:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "944:4:5",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "933:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "933:16:5"
												},
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "951:3:5"
												},
												{
													"name": "length",
													"nodeType": "YulIdentifier",
													"src": "956:6:5"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulIdentifier",
												"src": "898:34:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "898:65:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "898:65:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "972:46:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "983:3:5"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "1010:6:5"
														}
													],
													"functionName": {
														"name": "round_up_to_mul_of_32",
														"nodeType": "YulIdentifier",
														"src": "988:21:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "988:29:5"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "979:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "979:39:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "972:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "720:5:5",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "727:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "735:3:5",
									"type": ""
								}
							],
							"src": "647:377:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1148:195:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1158:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "1170:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1181:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "1166:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1166:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "1158:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1205:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "1216:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "1201:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "1201:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "1224:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "1230:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "1220:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "1220:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "1194:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1194:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1194:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "1250:86:5",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "1322:6:5"
												},
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "1331:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "1258:63:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1258:78:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "1250:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "1120:9:5",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "1132:6:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "1143:4:5",
									"type": ""
								}
							],
							"src": "1030:313:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1389:35:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1399:19:5",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1415:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nodeType": "YulIdentifier",
												"src": "1409:5:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1409:9:5"
										},
										"variableNames": [
											{
												"name": "memPtr",
												"nodeType": "YulIdentifier",
												"src": "1399:6:5"
											}
										]
									}
								]
							},
							"name": "allocate_unbounded",
							"nodeType": "YulFunctionDefinition",
							"returnVariables": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "1382:6:5",
									"type": ""
								}
							],
							"src": "1349:75:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1519:28:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1536:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1539:1:5",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "1529:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1529:12:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1529:12:5"
									}
								]
							},
							"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
							"nodeType": "YulFunctionDefinition",
							"src": "1430:117:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1642:28:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1659:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1662:1:5",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "1652:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1652:12:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "1652:12:5"
									}
								]
							},
							"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
							"nodeType": "YulFunctionDefinition",
							"src": "1553:117:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1721:81:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1731:65:5",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1746:5:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "1753:42:5",
													"type": "",
													"value": "0xffffffffffffffffffffffffffffffffffffffff"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "1742:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1742:54:5"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "1731:7:5"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint160",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1703:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "1713:7:5",
									"type": ""
								}
							],
							"src": "1676:126:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1853:51:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "1863:35:5",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "1892:5:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint160",
												"nodeType": "YulIdentifier",
												"src": "1874:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1874:24:5"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "1863:7:5"
											}
										]
									}
								]
							},
							"name": "cleanup_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1835:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "1845:7:5",
									"type": ""
								}
							],
							"src": "1808:96:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "1953:79:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2010:16:5",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2019:1:5",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2022:1:5",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "2012:6:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "2012:12:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2012:12:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "1976:5:5"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2001:5:5"
																}
															],
															"functionName": {
																"name": "cleanup_t_address",
																"nodeType": "YulIdentifier",
																"src": "1983:17:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "1983:24:5"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "1973:2:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "1973:35:5"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "1966:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "1966:43:5"
										},
										"nodeType": "YulIf",
										"src": "1963:63:5"
									}
								]
							},
							"name": "validator_revert_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "1946:5:5",
									"type": ""
								}
							],
							"src": "1910:122:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2090:87:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2100:29:5",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "2122:6:5"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "2109:12:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2109:20:5"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "2100:5:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2165:5:5"
												}
											],
											"functionName": {
												"name": "validator_revert_t_address",
												"nodeType": "YulIdentifier",
												"src": "2138:26:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2138:33:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2138:33:5"
									}
								]
							},
							"name": "abi_decode_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "2068:6:5",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "2076:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2084:5:5",
									"type": ""
								}
							],
							"src": "2038:139:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2228:32:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2238:16:5",
										"value": {
											"name": "value",
											"nodeType": "YulIdentifier",
											"src": "2249:5:5"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "2238:7:5"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2210:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "2220:7:5",
									"type": ""
								}
							],
							"src": "2183:77:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2309:79:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2366:16:5",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2375:1:5",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2378:1:5",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nodeType": "YulIdentifier",
															"src": "2368:6:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "2368:12:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2368:12:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "2332:5:5"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2357:5:5"
																}
															],
															"functionName": {
																"name": "cleanup_t_uint256",
																"nodeType": "YulIdentifier",
																"src": "2339:17:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "2339:24:5"
														}
													],
													"functionName": {
														"name": "eq",
														"nodeType": "YulIdentifier",
														"src": "2329:2:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "2329:35:5"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "2322:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2322:43:5"
										},
										"nodeType": "YulIf",
										"src": "2319:63:5"
									}
								]
							},
							"name": "validator_revert_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2302:5:5",
									"type": ""
								}
							],
							"src": "2266:122:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2446:87:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "2456:29:5",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nodeType": "YulIdentifier",
													"src": "2478:6:5"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nodeType": "YulIdentifier",
												"src": "2465:12:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2465:20:5"
										},
										"variableNames": [
											{
												"name": "value",
												"nodeType": "YulIdentifier",
												"src": "2456:5:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "2521:5:5"
												}
											],
											"functionName": {
												"name": "validator_revert_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "2494:26:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2494:33:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "2494:33:5"
									}
								]
							},
							"name": "abi_decode_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nodeType": "YulTypedName",
									"src": "2424:6:5",
									"type": ""
								},
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "2432:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "2440:5:5",
									"type": ""
								}
							],
							"src": "2394:139:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "2622:391:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "2668:83:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "2670:77:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "2670:79:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "2670:79:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2643:7:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "2652:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "2639:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "2639:23:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2664:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "2635:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "2635:32:5"
										},
										"nodeType": "YulIf",
										"src": "2632:119:5"
									},
									{
										"nodeType": "YulBlock",
										"src": "2761:117:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2776:15:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2790:1:5",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2780:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "2805:63:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2840:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2851:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2836:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "2836:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2860:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "2815:20:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "2815:53:5"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "2805:6:5"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "2888:118:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "2903:16:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "2917:2:5",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2907:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "2933:63:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "2968:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "2979:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "2964:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "2964:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "2988:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "2943:20:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "2943:53:5"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "2933:6:5"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "2584:9:5",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "2595:7:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "2607:6:5",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "2615:6:5",
									"type": ""
								}
							],
							"src": "2539:474:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3061:48:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3071:32:5",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3096:5:5"
														}
													],
													"functionName": {
														"name": "iszero",
														"nodeType": "YulIdentifier",
														"src": "3089:6:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "3089:13:5"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "3082:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3082:21:5"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "3071:7:5"
											}
										]
									}
								]
							},
							"name": "cleanup_t_bool",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3043:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "3053:7:5",
									"type": ""
								}
							],
							"src": "3019:90:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3174:50:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3191:3:5"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3211:5:5"
														}
													],
													"functionName": {
														"name": "cleanup_t_bool",
														"nodeType": "YulIdentifier",
														"src": "3196:14:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "3196:21:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3184:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3184:34:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3184:34:5"
									}
								]
							},
							"name": "abi_encode_t_bool_to_t_bool_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3162:5:5",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3169:3:5",
									"type": ""
								}
							],
							"src": "3115:109:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3322:118:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3332:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3344:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3355:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3340:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3340:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "3332:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "3406:6:5"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3419:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3430:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3415:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "3415:17:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulIdentifier",
												"src": "3368:37:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3368:65:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3368:65:5"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3294:9:5",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3306:6:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "3317:4:5",
									"type": ""
								}
							],
							"src": "3230:210:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3511:53:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "3528:3:5"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "3551:5:5"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "3533:17:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "3533:24:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "3521:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3521:37:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3521:37:5"
									}
								]
							},
							"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "3499:5:5",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "3506:3:5",
									"type": ""
								}
							],
							"src": "3446:118:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3668:124:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "3678:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "3690:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3701:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "3686:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3686:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "3678:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "3758:6:5"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3771:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "3782:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "3767:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "3767:17:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulIdentifier",
												"src": "3714:43:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3714:71:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "3714:71:5"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3640:9:5",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3652:6:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "3663:4:5",
									"type": ""
								}
							],
							"src": "3570:222:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "3898:519:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "3944:83:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "3946:77:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "3946:79:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "3946:79:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "3919:7:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "3928:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "3915:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "3915:23:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "3940:2:5",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "3911:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "3911:32:5"
										},
										"nodeType": "YulIf",
										"src": "3908:119:5"
									},
									{
										"nodeType": "YulBlock",
										"src": "4037:117:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4052:15:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4066:1:5",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4056:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "4081:63:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4116:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "4127:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4112:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "4112:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4136:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "4091:20:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "4091:53:5"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "4081:6:5"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "4164:118:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4179:16:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4193:2:5",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4183:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "4209:63:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4244:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "4255:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4240:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "4240:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4264:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "4219:20:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "4219:53:5"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "4209:6:5"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "4292:118:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "4307:16:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4321:2:5",
													"type": "",
													"value": "64"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "4311:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "4337:63:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "4372:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "4383:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "4368:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "4368:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4392:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_uint256",
														"nodeType": "YulIdentifier",
														"src": "4347:20:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "4347:53:5"
												},
												"variableNames": [
													{
														"name": "value2",
														"nodeType": "YulIdentifier",
														"src": "4337:6:5"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "3852:9:5",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "3863:7:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "3875:6:5",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "3883:6:5",
									"type": ""
								},
								{
									"name": "value2",
									"nodeType": "YulTypedName",
									"src": "3891:6:5",
									"type": ""
								}
							],
							"src": "3798:619:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4466:43:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4476:27:5",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nodeType": "YulIdentifier",
													"src": "4491:5:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4498:4:5",
													"type": "",
													"value": "0xff"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "4487:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4487:16:5"
										},
										"variableNames": [
											{
												"name": "cleaned",
												"nodeType": "YulIdentifier",
												"src": "4476:7:5"
											}
										]
									}
								]
							},
							"name": "cleanup_t_uint8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "4448:5:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "cleaned",
									"nodeType": "YulTypedName",
									"src": "4458:7:5",
									"type": ""
								}
							],
							"src": "4423:86:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4576:51:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "4593:3:5"
												},
												{
													"arguments": [
														{
															"name": "value",
															"nodeType": "YulIdentifier",
															"src": "4614:5:5"
														}
													],
													"functionName": {
														"name": "cleanup_t_uint8",
														"nodeType": "YulIdentifier",
														"src": "4598:15:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "4598:22:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "4586:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4586:35:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4586:35:5"
									}
								]
							},
							"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nodeType": "YulTypedName",
									"src": "4564:5:5",
									"type": ""
								},
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "4571:3:5",
									"type": ""
								}
							],
							"src": "4515:112:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4727:120:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "4737:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "4749:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4760:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "4745:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4745:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "4737:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "value0",
													"nodeType": "YulIdentifier",
													"src": "4813:6:5"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4826:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "4837:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "4822:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "4822:17:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulIdentifier",
												"src": "4773:39:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4773:67:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "4773:67:5"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "4699:9:5",
									"type": ""
								},
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "4711:6:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "4722:4:5",
									"type": ""
								}
							],
							"src": "4633:214:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "4919:263:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "4965:83:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "4967:77:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "4967:79:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "4967:79:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "4940:7:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "4949:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "4936:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "4936:23:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "4961:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "4932:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "4932:32:5"
										},
										"nodeType": "YulIf",
										"src": "4929:119:5"
									},
									{
										"nodeType": "YulBlock",
										"src": "5058:117:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "5073:15:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5087:1:5",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5077:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "5102:63:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5137:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "5148:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5133:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "5133:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "5157:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "5112:20:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "5112:53:5"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "5102:6:5"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "4889:9:5",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "4900:7:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "4912:6:5",
									"type": ""
								}
							],
							"src": "4853:329:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5271:391:5",
								"statements": [
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "5317:83:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
															"nodeType": "YulIdentifier",
															"src": "5319:77:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "5319:79:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "5319:79:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "5292:7:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "5301:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "5288:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "5288:23:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5313:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nodeType": "YulIdentifier",
												"src": "5284:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5284:32:5"
										},
										"nodeType": "YulIf",
										"src": "5281:119:5"
									},
									{
										"nodeType": "YulBlock",
										"src": "5410:117:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "5425:15:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5439:1:5",
													"type": "",
													"value": "0"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5429:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "5454:63:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5489:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "5500:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5485:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "5485:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "5509:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "5464:20:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "5464:53:5"
												},
												"variableNames": [
													{
														"name": "value0",
														"nodeType": "YulIdentifier",
														"src": "5454:6:5"
													}
												]
											}
										]
									},
									{
										"nodeType": "YulBlock",
										"src": "5537:118:5",
										"statements": [
											{
												"nodeType": "YulVariableDeclaration",
												"src": "5552:16:5",
												"value": {
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5566:2:5",
													"type": "",
													"value": "32"
												},
												"variables": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5556:6:5",
														"type": ""
													}
												]
											},
											{
												"nodeType": "YulAssignment",
												"src": "5582:63:5",
												"value": {
													"arguments": [
														{
															"arguments": [
																{
																	"name": "headStart",
																	"nodeType": "YulIdentifier",
																	"src": "5617:9:5"
																},
																{
																	"name": "offset",
																	"nodeType": "YulIdentifier",
																	"src": "5628:6:5"
																}
															],
															"functionName": {
																"name": "add",
																"nodeType": "YulIdentifier",
																"src": "5613:3:5"
															},
															"nodeType": "YulFunctionCall",
															"src": "5613:22:5"
														},
														{
															"name": "dataEnd",
															"nodeType": "YulIdentifier",
															"src": "5637:7:5"
														}
													],
													"functionName": {
														"name": "abi_decode_t_address",
														"nodeType": "YulIdentifier",
														"src": "5592:20:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "5592:53:5"
												},
												"variableNames": [
													{
														"name": "value1",
														"nodeType": "YulIdentifier",
														"src": "5582:6:5"
													}
												]
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "5233:9:5",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nodeType": "YulTypedName",
									"src": "5244:7:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nodeType": "YulTypedName",
									"src": "5256:6:5",
									"type": ""
								},
								{
									"name": "value1",
									"nodeType": "YulTypedName",
									"src": "5264:6:5",
									"type": ""
								}
							],
							"src": "5188:474:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5696:152:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5713:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5716:77:5",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5706:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5706:88:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5706:88:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5810:1:5",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5813:4:5",
													"type": "",
													"value": "0x22"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "5803:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5803:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5803:15:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5834:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5837:4:5",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "5827:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5827:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "5827:15:5"
									}
								]
							},
							"name": "panic_error_0x22",
							"nodeType": "YulFunctionDefinition",
							"src": "5668:180:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "5905:269:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "5915:22:5",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "5929:4:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5935:1:5",
													"type": "",
													"value": "2"
												}
											],
											"functionName": {
												"name": "div",
												"nodeType": "YulIdentifier",
												"src": "5925:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5925:12:5"
										},
										"variableNames": [
											{
												"name": "length",
												"nodeType": "YulIdentifier",
												"src": "5915:6:5"
											}
										]
									},
									{
										"nodeType": "YulVariableDeclaration",
										"src": "5946:38:5",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nodeType": "YulIdentifier",
													"src": "5976:4:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "5982:1:5",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nodeType": "YulIdentifier",
												"src": "5972:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5972:12:5"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nodeType": "YulTypedName",
												"src": "5950:18:5",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6023:51:5",
											"statements": [
												{
													"nodeType": "YulAssignment",
													"src": "6037:27:5",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "6051:6:5"
															},
															{
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6059:4:5",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nodeType": "YulIdentifier",
															"src": "6047:3:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "6047:17:5"
													},
													"variableNames": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "6037:6:5"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "6003:18:5"
												}
											],
											"functionName": {
												"name": "iszero",
												"nodeType": "YulIdentifier",
												"src": "5996:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "5996:26:5"
										},
										"nodeType": "YulIf",
										"src": "5993:81:5"
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6126:42:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x22",
															"nodeType": "YulIdentifier",
															"src": "6140:16:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "6140:18:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6140:18:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nodeType": "YulIdentifier",
													"src": "6090:18:5"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nodeType": "YulIdentifier",
															"src": "6113:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6121:2:5",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nodeType": "YulIdentifier",
														"src": "6110:2:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "6110:14:5"
												}
											],
											"functionName": {
												"name": "eq",
												"nodeType": "YulIdentifier",
												"src": "6087:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6087:38:5"
										},
										"nodeType": "YulIf",
										"src": "6084:84:5"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nodeType": "YulTypedName",
									"src": "5889:4:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nodeType": "YulTypedName",
									"src": "5898:6:5",
									"type": ""
								}
							],
							"src": "5854:320:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6208:152:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6225:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6228:77:5",
													"type": "",
													"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6218:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6218:88:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6218:88:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6322:1:5",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6325:4:5",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6315:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6315:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6315:15:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6346:1:5",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "6349:4:5",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nodeType": "YulIdentifier",
												"src": "6339:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6339:15:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6339:15:5"
									}
								]
							},
							"name": "panic_error_0x11",
							"nodeType": "YulFunctionDefinition",
							"src": "6180:180:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6410:147:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6420:25:5",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6443:1:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6425:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6425:20:5"
										},
										"variableNames": [
											{
												"name": "x",
												"nodeType": "YulIdentifier",
												"src": "6420:1:5"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6454:25:5",
										"value": {
											"arguments": [
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6477:1:5"
												}
											],
											"functionName": {
												"name": "cleanup_t_uint256",
												"nodeType": "YulIdentifier",
												"src": "6459:17:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6459:20:5"
										},
										"variableNames": [
											{
												"name": "y",
												"nodeType": "YulIdentifier",
												"src": "6454:1:5"
											}
										]
									},
									{
										"nodeType": "YulAssignment",
										"src": "6488:16:5",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6499:1:5"
												},
												{
													"name": "y",
													"nodeType": "YulIdentifier",
													"src": "6502:1:5"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "6495:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6495:9:5"
										},
										"variableNames": [
											{
												"name": "sum",
												"nodeType": "YulIdentifier",
												"src": "6488:3:5"
											}
										]
									},
									{
										"body": {
											"nodeType": "YulBlock",
											"src": "6528:22:5",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nodeType": "YulIdentifier",
															"src": "6530:16:5"
														},
														"nodeType": "YulFunctionCall",
														"src": "6530:18:5"
													},
													"nodeType": "YulExpressionStatement",
													"src": "6530:18:5"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nodeType": "YulIdentifier",
													"src": "6520:1:5"
												},
												{
													"name": "sum",
													"nodeType": "YulIdentifier",
													"src": "6523:3:5"
												}
											],
											"functionName": {
												"name": "gt",
												"nodeType": "YulIdentifier",
												"src": "6517:2:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6517:10:5"
										},
										"nodeType": "YulIf",
										"src": "6514:36:5"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nodeType": "YulTypedName",
									"src": "6397:1:5",
									"type": ""
								},
								{
									"name": "y",
									"nodeType": "YulTypedName",
									"src": "6400:1:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nodeType": "YulTypedName",
									"src": "6406:3:5",
									"type": ""
								}
							],
							"src": "6366:191:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6669:118:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "6691:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6699:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6687:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "6687:14:5"
												},
												{
													"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "6703:34:5",
													"type": "",
													"value": "ERC20: decreased allowance below"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6680:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6680:58:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6680:58:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "6759:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "6767:2:5",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "6755:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "6755:15:5"
												},
												{
													"hexValue": "207a65726f",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "6772:7:5",
													"type": "",
													"value": " zero"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "6748:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6748:32:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "6748:32:5"
									}
								]
							},
							"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "6661:6:5",
									"type": ""
								}
							],
							"src": "6563:224:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "6939:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "6949:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7015:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7020:2:5",
													"type": "",
													"value": "37"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "6956:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "6956:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "6949:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7121:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
												"nodeType": "YulIdentifier",
												"src": "7032:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7032:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7032:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7134:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "7145:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7150:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "7141:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7141:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "7134:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "6927:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "6935:3:5",
									"type": ""
								}
							],
							"src": "6793:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7336:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7346:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "7358:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "7369:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "7354:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7354:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7346:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7393:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7404:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7389:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "7389:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "7412:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "7418:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "7408:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "7408:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7382:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7382:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7382:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "7438:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "7572:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7446:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7446:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "7438:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "7316:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "7331:4:5",
									"type": ""
								}
							],
							"src": "7165:419:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7696:117:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "7718:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7726:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7714:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "7714:14:5"
												},
												{
													"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "7730:34:5",
													"type": "",
													"value": "ERC20: approve from the zero add"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7707:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7707:58:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7707:58:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "7786:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "7794:2:5",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "7782:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "7782:15:5"
												},
												{
													"hexValue": "72657373",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "7799:6:5",
													"type": "",
													"value": "ress"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "7775:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7775:31:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "7775:31:5"
									}
								]
							},
							"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "7688:6:5",
									"type": ""
								}
							],
							"src": "7590:223:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "7965:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "7975:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "8041:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8046:2:5",
													"type": "",
													"value": "36"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "7982:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "7982:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "7975:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "8147:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
												"nodeType": "YulIdentifier",
												"src": "8058:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8058:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8058:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "8160:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "8171:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8176:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8167:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8167:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "8160:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "7953:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "7961:3:5",
									"type": ""
								}
							],
							"src": "7819:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8362:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8372:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "8384:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "8395:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "8380:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8380:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8372:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8419:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8430:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8415:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "8415:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "8438:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "8444:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "8434:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "8434:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8408:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8408:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8408:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "8464:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "8598:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "8472:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8472:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "8464:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "8342:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "8357:4:5",
									"type": ""
								}
							],
							"src": "8191:419:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8722:115:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "8744:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8752:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8740:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "8740:14:5"
												},
												{
													"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "8756:34:5",
													"type": "",
													"value": "ERC20: approve to the zero addre"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8733:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8733:58:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8733:58:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "8812:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "8820:2:5",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "8808:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "8808:15:5"
												},
												{
													"hexValue": "7373",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "8825:4:5",
													"type": "",
													"value": "ss"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "8801:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "8801:29:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "8801:29:5"
									}
								]
							},
							"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "8714:6:5",
									"type": ""
								}
							],
							"src": "8616:221:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "8989:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "8999:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9065:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9070:2:5",
													"type": "",
													"value": "34"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "9006:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "9006:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "8999:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9171:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
												"nodeType": "YulIdentifier",
												"src": "9082:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "9082:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9082:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9184:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "9195:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9200:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9191:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "9191:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "9184:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "8977:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "8985:3:5",
									"type": ""
								}
							],
							"src": "8843:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9386:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9396:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "9408:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "9419:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "9404:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "9404:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9396:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9443:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9454:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9439:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "9439:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "9462:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "9468:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "9458:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "9458:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9432:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "9432:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9432:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "9488:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "9622:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "9496:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "9496:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "9488:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "9366:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "9381:4:5",
									"type": ""
								}
							],
							"src": "9215:419:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9746:73:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "9768:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "9776:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "9764:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "9764:14:5"
												},
												{
													"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "9780:31:5",
													"type": "",
													"value": "ERC20: insufficient allowance"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "9757:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "9757:55:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "9757:55:5"
									}
								]
							},
							"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "9738:6:5",
									"type": ""
								}
							],
							"src": "9640:179:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "9971:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "9981:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "10047:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10052:2:5",
													"type": "",
													"value": "29"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "9988:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "9988:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "9981:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "10153:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
												"nodeType": "YulIdentifier",
												"src": "10064:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "10064:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10064:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "10166:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "10177:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10182:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10173:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "10173:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "10166:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "9959:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "9967:3:5",
									"type": ""
								}
							],
							"src": "9825:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10368:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "10378:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "10390:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "10401:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "10386:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "10386:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "10378:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10425:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10436:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10421:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "10421:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "10444:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "10450:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "10440:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "10440:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10414:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "10414:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10414:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "10470:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "10604:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "10478:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "10478:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "10470:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "10348:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "10363:4:5",
									"type": ""
								}
							],
							"src": "10197:419:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10728:118:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "10750:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10758:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10746:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "10746:14:5"
												},
												{
													"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "10762:34:5",
													"type": "",
													"value": "ERC20: transfer from the zero ad"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10739:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "10739:58:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10739:58:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "10818:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "10826:2:5",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "10814:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "10814:15:5"
												},
												{
													"hexValue": "6472657373",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "10831:7:5",
													"type": "",
													"value": "dress"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "10807:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "10807:32:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "10807:32:5"
									}
								]
							},
							"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "10720:6:5",
									"type": ""
								}
							],
							"src": "10622:224:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "10998:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11008:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11074:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11079:2:5",
													"type": "",
													"value": "37"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "11015:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "11015:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "11008:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11180:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
												"nodeType": "YulIdentifier",
												"src": "11091:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "11091:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11091:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "11193:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "11204:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11209:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "11200:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "11200:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "11193:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "10986:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "10994:3:5",
									"type": ""
								}
							],
							"src": "10852:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11395:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "11405:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "11417:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "11428:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "11413:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "11413:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "11405:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11452:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11463:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11448:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "11448:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "11471:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "11477:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "11467:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "11467:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "11441:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "11441:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11441:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "11497:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "11631:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "11505:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "11505:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "11497:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "11375:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "11390:4:5",
									"type": ""
								}
							],
							"src": "11224:419:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "11755:116:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "11777:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11785:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11773:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "11773:14:5"
												},
												{
													"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "11789:34:5",
													"type": "",
													"value": "ERC20: transfer to the zero addr"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "11766:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "11766:58:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11766:58:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "11845:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "11853:2:5",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "11841:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "11841:15:5"
												},
												{
													"hexValue": "657373",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "11858:5:5",
													"type": "",
													"value": "ess"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "11834:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "11834:30:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "11834:30:5"
									}
								]
							},
							"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "11747:6:5",
									"type": ""
								}
							],
							"src": "11649:222:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12023:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "12033:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "12099:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12104:2:5",
													"type": "",
													"value": "35"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "12040:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "12040:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "12033:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "12205:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
												"nodeType": "YulIdentifier",
												"src": "12116:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "12116:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12116:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "12218:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "12229:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12234:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "12225:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "12225:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "12218:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "12011:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "12019:3:5",
									"type": ""
								}
							],
							"src": "11877:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12420:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "12430:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "12442:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "12453:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "12438:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "12438:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "12430:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12477:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12488:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12473:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "12473:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "12496:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "12502:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "12492:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "12492:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12466:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "12466:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12466:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "12522:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "12656:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "12530:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "12530:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "12522:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "12400:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "12415:4:5",
									"type": ""
								}
							],
							"src": "12249:419:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "12780:119:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "12802:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12810:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12798:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "12798:14:5"
												},
												{
													"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "12814:34:5",
													"type": "",
													"value": "ERC20: transfer amount exceeds b"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12791:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "12791:58:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12791:58:5"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "12870:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "12878:2:5",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "12866:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "12866:15:5"
												},
												{
													"hexValue": "616c616e6365",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "12883:8:5",
													"type": "",
													"value": "alance"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "12859:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "12859:33:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "12859:33:5"
									}
								]
							},
							"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "12772:6:5",
									"type": ""
								}
							],
							"src": "12674:225:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13051:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "13061:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13127:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13132:2:5",
													"type": "",
													"value": "38"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "13068:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "13068:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "13061:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13233:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
												"nodeType": "YulIdentifier",
												"src": "13144:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "13144:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "13144:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "13246:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "13257:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13262:2:5",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "13253:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "13253:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "13246:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "13039:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "13047:3:5",
									"type": ""
								}
							],
							"src": "12905:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13448:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "13458:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "13470:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "13481:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "13466:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "13466:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "13458:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13505:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13516:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13501:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "13501:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "13524:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "13530:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "13520:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "13520:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "13494:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "13494:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "13494:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "13550:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "13684:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "13558:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "13558:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "13550:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "13428:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "13443:4:5",
									"type": ""
								}
							],
							"src": "13277:419:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "13808:75:5",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nodeType": "YulIdentifier",
															"src": "13830:6:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "13838:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "13826:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "13826:14:5"
												},
												{
													"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
													"kind": "string",
													"nodeType": "YulLiteral",
													"src": "13842:33:5",
													"type": "",
													"value": "ERC20: mint to the zero address"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "13819:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "13819:57:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "13819:57:5"
									}
								]
							},
							"name": "store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "memPtr",
									"nodeType": "YulTypedName",
									"src": "13800:6:5",
									"type": ""
								}
							],
							"src": "13702:181:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14035:220:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "14045:74:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14111:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14116:2:5",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "14052:58:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "14052:67:5"
										},
										"variableNames": [
											{
												"name": "pos",
												"nodeType": "YulIdentifier",
												"src": "14045:3:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14217:3:5"
												}
											],
											"functionName": {
												"name": "store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
												"nodeType": "YulIdentifier",
												"src": "14128:88:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "14128:93:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14128:93:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "14230:19:5",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nodeType": "YulIdentifier",
													"src": "14241:3:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14246:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "14237:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "14237:12:5"
										},
										"variableNames": [
											{
												"name": "end",
												"nodeType": "YulIdentifier",
												"src": "14230:3:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nodeType": "YulTypedName",
									"src": "14023:3:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nodeType": "YulTypedName",
									"src": "14031:3:5",
									"type": ""
								}
							],
							"src": "13889:366:5"
						},
						{
							"body": {
								"nodeType": "YulBlock",
								"src": "14432:248:5",
								"statements": [
									{
										"nodeType": "YulAssignment",
										"src": "14442:26:5",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nodeType": "YulIdentifier",
													"src": "14454:9:5"
												},
												{
													"kind": "number",
													"nodeType": "YulLiteral",
													"src": "14465:2:5",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nodeType": "YulIdentifier",
												"src": "14450:3:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "14450:18:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "14442:4:5"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14489:9:5"
														},
														{
															"kind": "number",
															"nodeType": "YulLiteral",
															"src": "14500:1:5",
															"type": "",
															"value": "0"
														}
													],
													"functionName": {
														"name": "add",
														"nodeType": "YulIdentifier",
														"src": "14485:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "14485:17:5"
												},
												{
													"arguments": [
														{
															"name": "tail",
															"nodeType": "YulIdentifier",
															"src": "14508:4:5"
														},
														{
															"name": "headStart",
															"nodeType": "YulIdentifier",
															"src": "14514:9:5"
														}
													],
													"functionName": {
														"name": "sub",
														"nodeType": "YulIdentifier",
														"src": "14504:3:5"
													},
													"nodeType": "YulFunctionCall",
													"src": "14504:20:5"
												}
											],
											"functionName": {
												"name": "mstore",
												"nodeType": "YulIdentifier",
												"src": "14478:6:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "14478:47:5"
										},
										"nodeType": "YulExpressionStatement",
										"src": "14478:47:5"
									},
									{
										"nodeType": "YulAssignment",
										"src": "14534:139:5",
										"value": {
											"arguments": [
												{
													"name": "tail",
													"nodeType": "YulIdentifier",
													"src": "14668:4:5"
												}
											],
											"functionName": {
												"name": "abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulIdentifier",
												"src": "14542:124:5"
											},
											"nodeType": "YulFunctionCall",
											"src": "14542:131:5"
										},
										"variableNames": [
											{
												"name": "tail",
												"nodeType": "YulIdentifier",
												"src": "14534:4:5"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nodeType": "YulTypedName",
									"src": "14412:9:5",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nodeType": "YulTypedName",
									"src": "14427:4:5",
									"type": ""
								}
							],
							"src": "14261:419:5"
						}
					]
				},
				"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
				"id": 5,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {},
		"linkReferences": {},
		"object": "",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x40C10F19 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x20D JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x26D JUMPI PUSH2 0xB4 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x125 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x173 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xEC SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFE SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10F PUSH2 0x352 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11C SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13A SWAP2 SWAP1 PUSH2 0xDF2 JUMP JUMPDEST PUSH2 0x35C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14C SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15D PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16A SWAP2 SWAP1 PUSH2 0xE61 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x188 SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x394 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19A SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x3CB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x3D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E6 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F7 PUSH2 0x421 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x204 SWAP2 SWAP1 PUSH2 0xC97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x227 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x222 SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x234 SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x257 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x252 SWAP2 SWAP1 PUSH2 0xD52 JUMP JUMPDEST PUSH2 0x52A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x264 SWAP2 SWAP1 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x287 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x282 SWAP2 SWAP1 PUSH2 0xEA9 JUMP JUMPDEST PUSH2 0x54D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x294 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2AC SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2D8 SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x325 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2FA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x325 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x308 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x33A PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x347 DUP2 DUP6 DUP6 PUSH2 0x5DC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x367 PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x374 DUP6 DUP3 DUP6 PUSH2 0x7A5 JUMP JUMPDEST PUSH2 0x37F DUP6 DUP6 DUP6 PUSH2 0x831 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x18 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x39F PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x3C0 DUP2 DUP6 DUP6 PUSH2 0x3B1 DUP6 DUP10 PUSH2 0x54D JUMP JUMPDEST PUSH2 0x3BB SWAP2 SWAP1 PUSH2 0xF78 JUMP JUMPDEST PUSH2 0x5DC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3D5 DUP3 DUP3 PUSH2 0xAA7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x430 SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x45C SWAP1 PUSH2 0xF18 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4A9 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x47E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4A9 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x48C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x4BE PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4CC DUP3 DUP7 PUSH2 0x54D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x511 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x508 SWAP1 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x51E DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5DC JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x535 PUSH2 0x5D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x542 DUP2 DUP6 DUP6 PUSH2 0x831 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x64B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x642 SWAP1 PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6BA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B1 SWAP1 PUSH2 0x1142 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x798 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B1 DUP5 DUP5 PUSH2 0x54D JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x82B JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x81D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x814 SWAP1 PUSH2 0x11AE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x82A DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5DC JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x8A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x897 SWAP1 PUSH2 0x1240 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x90F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x906 SWAP1 PUSH2 0x12D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x91A DUP4 DUP4 DUP4 PUSH2 0xBFD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x9A0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x997 SWAP1 PUSH2 0x1364 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xAA1 DUP5 DUP5 DUP5 PUSH2 0xC02 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB16 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB0D SWAP1 PUSH2 0x13D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB22 PUSH1 0x0 DUP4 DUP4 PUSH2 0xBFD JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB34 SWAP2 SWAP1 PUSH2 0xF78 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xBE5 SWAP2 SWAP1 PUSH2 0xDD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xBF9 PUSH1 0x0 DUP4 DUP4 PUSH2 0xC02 JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC41 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC69 DUP3 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0xC73 DUP2 DUP6 PUSH2 0xC12 JUMP JUMPDEST SWAP4 POP PUSH2 0xC83 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC8C DUP2 PUSH2 0xC4D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCB1 DUP2 DUP5 PUSH2 0xC5E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCE9 DUP3 PUSH2 0xCBE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCF9 DUP2 PUSH2 0xCDE JUMP JUMPDEST DUP2 EQ PUSH2 0xD04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD16 DUP2 PUSH2 0xCF0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xD2F DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP2 EQ PUSH2 0xD3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xD4C DUP2 PUSH2 0xD26 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD69 JUMPI PUSH2 0xD68 PUSH2 0xCB9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD77 DUP6 DUP3 DUP7 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD88 DUP6 DUP3 DUP7 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDA7 DUP2 PUSH2 0xD92 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDC2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xDD1 DUP2 PUSH2 0xD1C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xDEC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xDC8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE0B JUMPI PUSH2 0xE0A PUSH2 0xCB9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE19 DUP7 DUP3 DUP8 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xE2A DUP7 DUP3 DUP8 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xE3B DUP7 DUP3 DUP8 ADD PUSH2 0xD3D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE5B DUP2 PUSH2 0xE45 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xE76 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE52 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE92 JUMPI PUSH2 0xE91 PUSH2 0xCB9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEA0 DUP5 DUP3 DUP6 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEC0 JUMPI PUSH2 0xEBF PUSH2 0xCB9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xECE DUP6 DUP3 DUP7 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xEDF DUP6 DUP3 DUP7 ADD PUSH2 0xD07 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF30 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF43 JUMPI PUSH2 0xF42 PUSH2 0xEE9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xF83 DUP3 PUSH2 0xD1C JUMP JUMPDEST SWAP2 POP PUSH2 0xF8E DUP4 PUSH2 0xD1C JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xFA6 JUMPI PUSH2 0xFA5 PUSH2 0xF49 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1008 PUSH1 0x25 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x1013 DUP3 PUSH2 0xFAC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1037 DUP2 PUSH2 0xFFB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x109A PUSH1 0x24 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x10A5 DUP3 PUSH2 0x103E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10C9 DUP2 PUSH2 0x108D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x112C PUSH1 0x22 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x1137 DUP3 PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x115B DUP2 PUSH2 0x111F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1198 PUSH1 0x1D DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x11A3 DUP3 PUSH2 0x1162 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11C7 DUP2 PUSH2 0x118B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x122A PUSH1 0x25 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x1235 DUP3 PUSH2 0x11CE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1259 DUP2 PUSH2 0x121D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12BC PUSH1 0x23 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x12C7 DUP3 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12EB DUP2 PUSH2 0x12AF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x134E PUSH1 0x26 DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x1359 DUP3 PUSH2 0x12F2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x137D DUP2 PUSH2 0x1341 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13BA PUSH1 0x1F DUP4 PUSH2 0xC12 JUMP JUMPDEST SWAP2 POP PUSH2 0x13C5 DUP3 PUSH2 0x1384 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x13E9 DUP2 PUSH2 0x13AD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xA7 0xE6 BALANCE 0xC1 0xE3 ISZERO PUSH10 0xEB6A8EEEC94950BC310D CREATE PUSH2 0x363E BYTE 0xA8 SUB 0xB3 PUSH26 0xFBE904664C64736F6C6343000812003300000000000000000000 ",
		"sourceMap": "119:357:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4444:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3255:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5203:256;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;287:93:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5854:234:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;388:85:4;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3419:125:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2369:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6575:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3740:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3987:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2158:98;2212:13;2244:5;2237:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98;:::o;4444:197::-;4527:4;4543:13;4559:12;:10;:12::i;:::-;4543:28;;4581:32;4590:5;4597:7;4606:6;4581:8;:32::i;:::-;4630:4;4623:11;;;4444:197;;;;:::o;3255:106::-;3316:7;3342:12;;3335:19;;3255:106;:::o;5203:256::-;5300:4;5316:15;5334:12;:10;:12::i;:::-;5316:30;;5356:38;5372:4;5378:7;5387:6;5356:15;:38::i;:::-;5404:27;5414:4;5420:2;5424:6;5404:9;:27::i;:::-;5448:4;5441:11;;;5203:256;;;;;:::o;287:93:4:-;345:5;370:2;363:9;;287:93;:::o;5854:234:0:-;5942:4;5958:13;5974:12;:10;:12::i;:::-;5958:28;;5996:64;6005:5;6012:7;6049:10;6021:25;6031:5;6038:7;6021:9;:25::i;:::-;:38;;;;:::i;:::-;5996:8;:64::i;:::-;6077:4;6070:11;;;5854:234;;;;:::o;388:85:4:-;448:17;454:2;458:6;448:5;:17::i;:::-;388:85;;:::o;3419:125:0:-;3493:7;3519:9;:18;3529:7;3519:18;;;;;;;;;;;;;;;;3512:25;;3419:125;;;:::o;2369:102::-;2425:13;2457:7;2450:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2369:102;:::o;6575:427::-;6668:4;6684:13;6700:12;:10;:12::i;:::-;6684:28;;6722:24;6749:25;6759:5;6766:7;6749:9;:25::i;:::-;6722:52;;6812:15;6792:16;:35;;6784:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6903:60;6912:5;6919:7;6947:15;6928:16;:34;6903:8;:60::i;:::-;6991:4;6984:11;;;;6575:427;;;;:::o;3740:189::-;3819:4;3835:13;3851:12;:10;:12::i;:::-;3835:28;;3873;3883:5;3890:2;3894:6;3873:9;:28::i;:::-;3918:4;3911:11;;;3740:189;;;;:::o;3987:149::-;4076:7;4102:11;:18;4114:5;4102:18;;;;;;;;;;;;;;;:27;4121:7;4102:27;;;;;;;;;;;;;;;;4095:34;;3987:149;;;;:::o;640:96:3:-;693:7;719:10;712:17;;640:96;:::o;10457:340:0:-;10575:1;10558:19;;:5;:19;;;10550:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10655:1;10636:21;;:7;:21;;;10628:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10737:6;10707:11;:18;10719:5;10707:18;;;;;;;;;;;;;;;:27;10726:7;10707:27;;;;;;;;;;;;;;;:36;;;;10774:7;10758:32;;10767:5;10758:32;;;10783:6;10758:32;;;;;;:::i;:::-;;;;;;;;10457:340;;;:::o;11078:411::-;11178:24;11205:25;11215:5;11222:7;11205:9;:25::i;:::-;11178:52;;11264:17;11244:16;:37;11240:243;;11325:6;11305:16;:26;;11297:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11407:51;11416:5;11423:7;11451:6;11432:16;:25;11407:8;:51::i;:::-;11240:243;11168:321;11078:411;;;:::o;7456:788::-;7568:1;7552:18;;:4;:18;;;7544:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7644:1;7630:16;;:2;:16;;;7622:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7697:38;7718:4;7724:2;7728:6;7697:20;:38::i;:::-;7746:19;7768:9;:15;7778:4;7768:15;;;;;;;;;;;;;;;;7746:37;;7816:6;7801:11;:21;;7793:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;7931:6;7917:11;:20;7899:9;:15;7909:4;7899:15;;;;;;;;;;;;;;;:38;;;;8131:6;8114:9;:13;8124:2;8114:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8178:2;8163:26;;8172:4;8163:26;;;8182:6;8163:26;;;;;;:::i;:::-;;;;;;;;8200:37;8220:4;8226:2;8230:6;8200:19;:37::i;:::-;7534:710;7456:788;;;:::o;8520:535::-;8622:1;8603:21;;:7;:21;;;8595:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8671:49;8700:1;8704:7;8713:6;8671:20;:49::i;:::-;8747:6;8731:12;;:22;;;;;;;:::i;:::-;;;;;;;;8921:6;8899:9;:18;8909:7;8899:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;8973:7;8952:37;;8969:1;8952:37;;;8982:6;8952:37;;;;;;:::i;:::-;;;;;;;;9000:48;9028:1;9032:7;9041:6;9000:19;:48::i;:::-;8520:535;;:::o;12073:91::-;;;;:::o;12752:90::-;;;;:::o;7:99:5:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:329::-;4912:6;4961:2;4949:9;4940:7;4936:23;4932:32;4929:119;;;4967:79;;:::i;:::-;4929:119;5087:1;5112:53;5157:7;5148:6;5137:9;5133:22;5112:53;:::i;:::-;5102:63;;5058:117;4853:329;;;;:::o;5188:474::-;5256:6;5264;5313:2;5301:9;5292:7;5288:23;5284:32;5281:119;;;5319:79;;:::i;:::-;5281:119;5439:1;5464:53;5509:7;5500:6;5489:9;5485:22;5464:53;:::i;:::-;5454:63;;5410:117;5566:2;5592:53;5637:7;5628:6;5617:9;5613:22;5592:53;:::i;:::-;5582:63;;5537:118;5188:474;;;;;:::o;5668:180::-;5716:77;5713:1;5706:88;5813:4;5810:1;5803:15;5837:4;5834:1;5827:15;5854:320;5898:6;5935:1;5929:4;5925:12;5915:22;;5982:1;5976:4;5972:12;6003:18;5993:81;;6059:4;6051:6;6047:17;6037:27;;5993:81;6121:2;6113:6;6110:14;6090:18;6087:38;6084:84;;6140:18;;:::i;:::-;6084:84;5905:269;5854:320;;;:::o;6180:180::-;6228:77;6225:1;6218:88;6325:4;6322:1;6315:15;6349:4;6346:1;6339:15;6366:191;6406:3;6425:20;6443:1;6425:20;:::i;:::-;6420:25;;6459:20;6477:1;6459:20;:::i;:::-;6454:25;;6502:1;6499;6495:9;6488:16;;6523:3;6520:1;6517:10;6514:36;;;6530:18;;:::i;:::-;6514:36;6366:191;;;;:::o;6563:224::-;6703:34;6699:1;6691:6;6687:14;6680:58;6772:7;6767:2;6759:6;6755:15;6748:32;6563:224;:::o;6793:366::-;6935:3;6956:67;7020:2;7015:3;6956:67;:::i;:::-;6949:74;;7032:93;7121:3;7032:93;:::i;:::-;7150:2;7145:3;7141:12;7134:19;;6793:366;;;:::o;7165:419::-;7331:4;7369:2;7358:9;7354:18;7346:26;;7418:9;7412:4;7408:20;7404:1;7393:9;7389:17;7382:47;7446:131;7572:4;7446:131;:::i;:::-;7438:139;;7165:419;;;:::o;7590:223::-;7730:34;7726:1;7718:6;7714:14;7707:58;7799:6;7794:2;7786:6;7782:15;7775:31;7590:223;:::o;7819:366::-;7961:3;7982:67;8046:2;8041:3;7982:67;:::i;:::-;7975:74;;8058:93;8147:3;8058:93;:::i;:::-;8176:2;8171:3;8167:12;8160:19;;7819:366;;;:::o;8191:419::-;8357:4;8395:2;8384:9;8380:18;8372:26;;8444:9;8438:4;8434:20;8430:1;8419:9;8415:17;8408:47;8472:131;8598:4;8472:131;:::i;:::-;8464:139;;8191:419;;;:::o;8616:221::-;8756:34;8752:1;8744:6;8740:14;8733:58;8825:4;8820:2;8812:6;8808:15;8801:29;8616:221;:::o;8843:366::-;8985:3;9006:67;9070:2;9065:3;9006:67;:::i;:::-;8999:74;;9082:93;9171:3;9082:93;:::i;:::-;9200:2;9195:3;9191:12;9184:19;;8843:366;;;:::o;9215:419::-;9381:4;9419:2;9408:9;9404:18;9396:26;;9468:9;9462:4;9458:20;9454:1;9443:9;9439:17;9432:47;9496:131;9622:4;9496:131;:::i;:::-;9488:139;;9215:419;;;:::o;9640:179::-;9780:31;9776:1;9768:6;9764:14;9757:55;9640:179;:::o;9825:366::-;9967:3;9988:67;10052:2;10047:3;9988:67;:::i;:::-;9981:74;;10064:93;10153:3;10064:93;:::i;:::-;10182:2;10177:3;10173:12;10166:19;;9825:366;;;:::o;10197:419::-;10363:4;10401:2;10390:9;10386:18;10378:26;;10450:9;10444:4;10440:20;10436:1;10425:9;10421:17;10414:47;10478:131;10604:4;10478:131;:::i;:::-;10470:139;;10197:419;;;:::o;10622:224::-;10762:34;10758:1;10750:6;10746:14;10739:58;10831:7;10826:2;10818:6;10814:15;10807:32;10622:224;:::o;10852:366::-;10994:3;11015:67;11079:2;11074:3;11015:67;:::i;:::-;11008:74;;11091:93;11180:3;11091:93;:::i;:::-;11209:2;11204:3;11200:12;11193:19;;10852:366;;;:::o;11224:419::-;11390:4;11428:2;11417:9;11413:18;11405:26;;11477:9;11471:4;11467:20;11463:1;11452:9;11448:17;11441:47;11505:131;11631:4;11505:131;:::i;:::-;11497:139;;11224:419;;;:::o;11649:222::-;11789:34;11785:1;11777:6;11773:14;11766:58;11858:5;11853:2;11845:6;11841:15;11834:30;11649:222;:::o;11877:366::-;12019:3;12040:67;12104:2;12099:3;12040:67;:::i;:::-;12033:74;;12116:93;12205:3;12116:93;:::i;:::-;12234:2;12229:3;12225:12;12218:19;;11877:366;;;:::o;12249:419::-;12415:4;12453:2;12442:9;12438:18;12430:26;;12502:9;12496:4;12492:20;12488:1;12477:9;12473:17;12466:47;12530:131;12656:4;12530:131;:::i;:::-;12522:139;;12249:419;;;:::o;12674:225::-;12814:34;12810:1;12802:6;12798:14;12791:58;12883:8;12878:2;12870:6;12866:15;12859:33;12674:225;:::o;12905:366::-;13047:3;13068:67;13132:2;13127:3;13068:67;:::i;:::-;13061:74;;13144:93;13233:3;13144:93;:::i;:::-;13262:2;13257:3;13253:12;13246:19;;12905:366;;;:::o;13277:419::-;13443:4;13481:2;13470:9;13466:18;13458:26;;13530:9;13524:4;13520:20;13516:1;13505:9;13501:17;13494:47;13558:131;13684:4;13558:131;:::i;:::-;13550:139;;13277:419;;;:::o;13702:181::-;13842:33;13838:1;13830:6;13826:14;13819:57;13702:181;:::o;13889:366::-;14031:3;14052:67;14116:2;14111:3;14052:67;:::i;:::-;14045:74;;14128:93;14217:3;14128:93;:::i;:::-;14246:2;14241:3;14237:12;14230:19;;13889:366;;;:::o;14261:419::-;14427:4;14465:2;14454:9;14450:18;14442:26;;14514:9;14508:4;14504:20;14500:1;14489:9;14485:17;14478:47;14542:131;14668:4;14542:131;:::i;:::-;14534:139;;14261:419;;;:::o"
	},
	"Assembly": ".code\n  PUSH 80\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  PUSH 40\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  MSTORE \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  CALLVALUE \t\t\tconstructor(uint256 initialSup...\n  DUP1 \t\t\tconstructor(uint256 initialSup...\n  ISZERO \t\t\tconstructor(uint256 initialSup...\n  PUSH [tag] 1\t\t\tconstructor(uint256 initialSup...\n  JUMPI \t\t\tconstructor(uint256 initialSup...\n  PUSH 0\t\t\tconstructor(uint256 initialSup...\n  DUP1 \t\t\tconstructor(uint256 initialSup...\n  REVERT \t\t\tconstructor(uint256 initialSup...\ntag 1\t\t\tconstructor(uint256 initialSup...\n  JUMPDEST \t\t\tconstructor(uint256 initialSup...\n  POP \t\t\tconstructor(uint256 initialSup...\n  PUSH 40\t\t\tconstructor(uint256 initialSup...\n  MLOAD \t\t\tconstructor(uint256 initialSup...\n  PUSHSIZE \t\t\tconstructor(uint256 initialSup...\n  CODESIZE \t\t\tconstructor(uint256 initialSup...\n  SUB \t\t\tconstructor(uint256 initialSup...\n  DUP1 \t\t\tconstructor(uint256 initialSup...\n  PUSHSIZE \t\t\tconstructor(uint256 initialSup...\n  DUP4 \t\t\tconstructor(uint256 initialSup...\n  CODECOPY \t\t\tconstructor(uint256 initialSup...\n  DUP2 \t\t\tconstructor(uint256 initialSup...\n  DUP2 \t\t\tconstructor(uint256 initialSup...\n  ADD \t\t\tconstructor(uint256 initialSup...\n  PUSH 40\t\t\tconstructor(uint256 initialSup...\n  MSTORE \t\t\tconstructor(uint256 initialSup...\n  DUP2 \t\t\tconstructor(uint256 initialSup...\n  ADD \t\t\tconstructor(uint256 initialSup...\n  SWAP1 \t\t\tconstructor(uint256 initialSup...\n  PUSH [tag] 2\t\t\tconstructor(uint256 initialSup...\n  SWAP2 \t\t\tconstructor(uint256 initialSup...\n  SWAP1 \t\t\tconstructor(uint256 initialSup...\n  PUSH [tag] 3\t\t\tconstructor(uint256 initialSup...\n  JUMP \t\t\tconstructor(uint256 initialSup...\ntag 2\t\t\tconstructor(uint256 initialSup...\n  JUMPDEST \t\t\tconstructor(uint256 initialSup...\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH B\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 5374616B6564204E454152000000000000000000000000000000000000000000\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  PUSH 40\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MSTORE \t\t\t\n  DUP1 \t\t\t\n  PUSH 6\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 73744E4541520000000000000000000000000000000000000000000000000000\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 3\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 7\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 7\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  PUSH 4\t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 9\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 8\t\t\t\n  JUMP \t\t\t\ntag 9\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  PUSH [tag] 11\t\t\t_mint(msg.sender, initialSuppl...\n  CALLER \t\t\tmsg.sender\n  PUSH D3C21BCECCEDA1000000\t\t\t10 ** 24\n  DUP4 \t\t\tinitialSupply\n  PUSH [tag] 12\t\t\tinitialSupply * 10 ** 24\n  SWAP2 \t\t\tinitialSupply * 10 ** 24\n  SWAP1 \t\t\tinitialSupply * 10 ** 24\n  PUSH [tag] 13\t\t\tinitialSupply * 10 ** 24\n  JUMP \t\t\tinitialSupply * 10 ** 24\ntag 12\t\t\tinitialSupply * 10 ** 24\n  JUMPDEST \t\t\tinitialSupply * 10 ** 24\n  PUSH [tag] 14\t\t\t_mint\n  PUSH 20\t\t\t_mint\n  SHL \t\t\t_mint\n  PUSH 20\t\t\t_mint(msg.sender, initialSuppl...\n  SHR \t\t\t_mint(msg.sender, initialSuppl...\n  JUMP \t\t\t_mint(msg.sender, initialSuppl...\ntag 11\t\t\t_mint(msg.sender, initialSuppl...\n  JUMPDEST \t\t\t_mint(msg.sender, initialSuppl...\n  POP \t\t\tconstructor(uint256 initialSup...\n  PUSH [tag] 15\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  JUMP \t\t\tcontract stNEAR is ERC20 {\\r\\n...\ntag 14\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  SUB \t\t\t\n  PUSH [tag] 17\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  ADD \t\t\t\n  PUSH [tag] 18\t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 19\t\t\t\n  JUMP \t\t\t\ntag 18\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  REVERT \t\t\t\ntag 17\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 20\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 21\t\t\t\n  PUSH 20\t\t\t\n  SHL \t\t\t\n  PUSH 20\t\t\t\n  SHR \t\t\t\n  JUMP \t\t\t\ntag 20\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  PUSH 2\t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 22\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 23\t\t\t\n  JUMP \t\t\t\ntag 22\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  DUP5 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  ADD \t\t\t\n  PUSH 0\t\t\t\n  KECCAK256 \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  ADD \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  PUSH 0\t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  AND \t\t\t\n  PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n  DUP4 \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 24\t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  PUSH [tag] 25\t\t\t\n  JUMP \t\t\t\ntag 24\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  LOG3 \t\t\t\n  PUSH [tag] 26\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 27\t\t\t\n  PUSH 20\t\t\t\n  SHL \t\t\t\n  PUSH 20\t\t\t\n  SHR \t\t\t\n  JUMP \t\t\t\ntag 26\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 21\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 27\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 31\t\t\tcts/token/ERC20/ERC20.sol\";\\r\\...\n  JUMPDEST \t\t\tcts/token/ERC20/ERC20.sol\";\\r\\...\n  PUSH 0\t\t\te\n  DUP1 \t\t\tt\n  REVERT \t\t\tRC20(\"Staked\ntag 33\t\t\te returns (uint8) {\\r\\n       ...\n  JUMPDEST \t\t\te returns (uint8) {\\r\\n       ...\n  PUSH 0\t\t\t4;\\r\\n   \n  DUP2 \t\t\tt(add\n  SWAP1 \t\t\tunction mint(add\n  POP \t\t\tunction mint(add\n  SWAP2 \t\t\te returns (uint8) {\\r\\n       ...\n  SWAP1 \t\t\te returns (uint8) {\\r\\n       ...\n  POP \t\t\te returns (uint8) {\\r\\n       ...\n  JUMP \t\t\te returns (uint8) {\\r\\n       ...\ntag 34\t\t\tt256 amount) public {\\r\\n     ...\n  JUMPDEST \t\t\tt256 amount) public {\\r\\n     ...\n  PUSH [tag] 66\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 66\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 67\t\t\t  }\\r\\n}\\r\\n\n  JUMPI \t\t\t  }\\r\\n}\\r\\n\n  PUSH 0\t\t\t\n  DUP1 \t\t\t\n  REVERT \t\t\t\ntag 67\t\t\t  }\\r\\n}\\r\\n\n  JUMPDEST \t\t\t  }\\r\\n}\\r\\n\n  POP \t\t\tt256 amount) public {\\r\\n     ...\n  JUMP \t\t\tt256 amount) public {\\r\\n     ...\ntag 35\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 69\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 34\t\t\t\n  JUMP \t\t\t\ntag 69\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 3\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  DUP5 \t\t\t\n  SUB \t\t\t\n  SLT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 71\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 72\t\t\t\n  PUSH [tag] 31\t\t\t\n  JUMP \t\t\t\ntag 72\t\t\t\n  JUMPDEST \t\t\t\ntag 71\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 73\t\t\t\n  DUP5 \t\t\t\n  DUP3 \t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  PUSH [tag] 35\t\t\t\n  JUMP \t\t\t\ntag 73\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 36\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 37\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 41\t\t\t\n  PUSH 4\t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t\ntag 38\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 22\t\t\t\n  PUSH 4\t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t\ntag 39\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 2\t\t\t\n  DUP3 \t\t\t\n  DIV \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  DUP1 \t\t\t\n  PUSH [tag] 78\t\t\t\n  JUMPI \t\t\t\n  PUSH 7F\t\t\t\n  DUP3 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\ntag 78\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  LT \t\t\t\n  DUP2 \t\t\t\n  SUB \t\t\t\n  PUSH [tag] 79\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 80\t\t\t\n  PUSH [tag] 38\t\t\t\n  JUMP \t\t\t\ntag 80\t\t\t\n  JUMPDEST \t\t\t\ntag 79\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 40\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  PUSH 0\t\t\t\n  KECCAK256 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 41\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DIV \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 42\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SHL \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 43\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 8\t\t\t\n  DUP4 \t\t\t\n  MUL \t\t\t\n  PUSH [tag] 85\t\t\t\n  PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 42\t\t\t\n  JUMP \t\t\t\ntag 85\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 86\t\t\t\n  DUP7 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 42\t\t\t\n  JUMP \t\t\t\ntag 86\t\t\t\n  JUMPDEST \t\t\t\n  SWAP6 \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  SWAP4 \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  DUP7 \t\t\t\n  AND \t\t\t\n  DUP5 \t\t\t\n  OR \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP4 \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 44\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 45\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 89\t\t\t\n  PUSH [tag] 90\t\t\t\n  PUSH [tag] 91\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 91\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 44\t\t\t\n  JUMP \t\t\t\ntag 90\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 89\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 46\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 47\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 94\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 45\t\t\t\n  JUMP \t\t\t\ntag 94\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 95\t\t\t\n  PUSH [tag] 96\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 46\t\t\t\n  JUMP \t\t\t\ntag 96\t\t\t\n  JUMPDEST \t\t\t\n  DUP5 \t\t\t\n  DUP5 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 43\t\t\t\n  JUMP \t\t\t\ntag 95\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 48\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  SWAP1 \t\t\t\n  JUMP \t\t\t\ntag 49\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 99\t\t\t\n  PUSH [tag] 48\t\t\t\n  JUMP \t\t\t\ntag 99\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 100\t\t\t\n  DUP2 \t\t\t\n  DUP5 \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 47\t\t\t\n  JUMP \t\t\t\ntag 100\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 50\t\t\t\n  JUMPDEST \t\t\t\ntag 102\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 104\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 105\t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 49\t\t\t\n  JUMP \t\t\t\ntag 105\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 102\t\t\t\n  JUMP \t\t\t\ntag 104\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 51\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 107\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 108\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 40\t\t\t\n  JUMP \t\t\t\ntag 108\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 109\t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 41\t\t\t\n  JUMP \t\t\t\ntag 109\t\t\t\n  JUMPDEST \t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 110\t\t\t\n  JUMPI \t\t\t\n  DUP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 110\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 111\t\t\t\n  PUSH [tag] 112\t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 41\t\t\t\n  JUMP \t\t\t\ntag 112\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 50\t\t\t\n  JUMP \t\t\t\ntag 111\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 107\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 52\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  SHR \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 53\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 115\t\t\t\n  PUSH 0\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  PUSH 8\t\t\t\n  MUL \t\t\t\n  PUSH [tag] 52\t\t\t\n  JUMP \t\t\t\ntag 115\t\t\t\n  JUMPDEST \t\t\t\n  NOT \t\t\t\n  DUP1 \t\t\t\n  DUP4 \t\t\t\n  AND \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 54\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 117\t\t\t\n  DUP4 \t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 53\t\t\t\n  JUMP \t\t\t\ntag 117\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP3 \t\t\t\n  PUSH 2\t\t\t\n  MUL \t\t\t\n  DUP3 \t\t\t\n  OR \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 8\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 119\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 36\t\t\t\n  JUMP \t\t\t\ntag 119\t\t\t\n  JUMPDEST \t\t\t\n  PUSH FFFFFFFFFFFFFFFF\t\t\t\n  DUP2 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 120\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 121\t\t\t\n  PUSH [tag] 37\t\t\t\n  JUMP \t\t\t\ntag 121\t\t\t\n  JUMPDEST \t\t\t\ntag 120\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 122\t\t\t\n  DUP3 \t\t\t\n  SLOAD \t\t\t\n  PUSH [tag] 39\t\t\t\n  JUMP \t\t\t\ntag 122\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 123\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  DUP6 \t\t\t\n  PUSH [tag] 51\t\t\t\n  JUMP \t\t\t\ntag 123\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  GT \t\t\t\n  PUSH 1\t\t\t\n  DUP2 \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 125\t\t\t\n  JUMPI \t\t\t\n  PUSH 0\t\t\t\n  DUP5 \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 126\t\t\t\n  JUMPI \t\t\t\n  DUP3 \t\t\t\n  DUP8 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\ntag 126\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 127\t\t\t\n  DUP6 \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 54\t\t\t\n  JUMP \t\t\t\ntag 127\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  PUSH [tag] 124\t\t\t\n  JUMP \t\t\t\ntag 125\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1F\t\t\t\n  NOT \t\t\t\n  DUP5 \t\t\t\n  AND \t\t\t\n  PUSH [tag] 128\t\t\t\n  DUP7 \t\t\t\n  PUSH [tag] 40\t\t\t\n  JUMP \t\t\t\ntag 128\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\ntag 129\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  DUP2 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 131\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  PUSH 1\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP6 \t\t\t\n  ADD \t\t\t\n  SWAP5 \t\t\t\n  POP \t\t\t\n  PUSH 20\t\t\t\n  DUP2 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 129\t\t\t\n  JUMP \t\t\t\ntag 131\t\t\t\n  JUMPDEST \t\t\t\n  DUP7 \t\t\t\n  DUP4 \t\t\t\n  LT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 132\t\t\t\n  JUMPI \t\t\t\n  DUP5 \t\t\t\n  DUP10 \t\t\t\n  ADD \t\t\t\n  MLOAD \t\t\t\n  PUSH [tag] 133\t\t\t\n  PUSH 1F\t\t\t\n  DUP10 \t\t\t\n  AND \t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 53\t\t\t\n  JUMP \t\t\t\ntag 133\t\t\t\n  JUMPDEST \t\t\t\n  DUP4 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\ntag 132\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 1\t\t\t\n  PUSH 2\t\t\t\n  DUP9 \t\t\t\n  MUL \t\t\t\n  ADD \t\t\t\n  DUP9 \t\t\t\n  SSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\ntag 124\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 55\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n  PUSH 0\t\t\t\n  MSTORE \t\t\t\n  PUSH 11\t\t\t\n  PUSH 4\t\t\t\n  MSTORE \t\t\t\n  PUSH 24\t\t\t\n  PUSH 0\t\t\t\n  REVERT \t\t\t\ntag 13\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 136\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 136\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 137\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 137\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  MUL \t\t\t\n  PUSH [tag] 138\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 138\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  DIV \t\t\t\n  DUP5 \t\t\t\n  EQ \t\t\t\n  DUP4 \t\t\t\n  ISZERO \t\t\t\n  OR \t\t\t\n  PUSH [tag] 139\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 140\t\t\t\n  PUSH [tag] 55\t\t\t\n  JUMP \t\t\t\ntag 140\t\t\t\n  JUMPDEST \t\t\t\ntag 139\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 56\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 57\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 45524332303A206D696E7420746F20746865207A65726F206164647265737300\t\t\t\n  PUSH 0\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 58\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 144\t\t\t\n  PUSH 1F\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 56\t\t\t\n  JUMP \t\t\t\ntag 144\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 145\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 57\t\t\t\n  JUMP \t\t\t\ntag 145\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 19\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  DUP2 \t\t\t\n  DUP2 \t\t\t\n  SUB \t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  MSTORE \t\t\t\n  PUSH [tag] 147\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 58\t\t\t\n  JUMP \t\t\t\ntag 147\t\t\t\n  JUMPDEST \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  SWAP2 \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 23\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH [tag] 149\t\t\t\n  DUP3 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 149\t\t\t\n  JUMPDEST \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 150\t\t\t\n  DUP4 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 150\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  POP \t\t\t\n  DUP3 \t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  DUP1 \t\t\t\n  DUP3 \t\t\t\n  GT \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 151\t\t\t\n  JUMPI \t\t\t\n  PUSH [tag] 152\t\t\t\n  PUSH [tag] 55\t\t\t\n  JUMP \t\t\t\ntag 152\t\t\t\n  JUMPDEST \t\t\t\ntag 151\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 59\t\t\t\n  JUMPDEST \t\t\t\n  PUSH [tag] 154\t\t\t\n  DUP2 \t\t\t\n  PUSH [tag] 33\t\t\t\n  JUMP \t\t\t\ntag 154\t\t\t\n  JUMPDEST \t\t\t\n  DUP3 \t\t\t\n  MSTORE \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 25\t\t\t\n  JUMPDEST \t\t\t\n  PUSH 0\t\t\t\n  PUSH 20\t\t\t\n  DUP3 \t\t\t\n  ADD \t\t\t\n  SWAP1 \t\t\t\n  POP \t\t\t\n  PUSH [tag] 156\t\t\t\n  PUSH 0\t\t\t\n  DUP4 \t\t\t\n  ADD \t\t\t\n  DUP5 \t\t\t\n  PUSH [tag] 59\t\t\t\n  JUMP \t\t\t\ntag 156\t\t\t\n  JUMPDEST \t\t\t\n  SWAP3 \t\t\t\n  SWAP2 \t\t\t\n  POP \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 15\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  JUMPDEST \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  PUSH 0\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  CODECOPY \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  PUSH 0\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n  RETURN \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 40\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      MSTORE \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      CALLVALUE \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      ISZERO \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 1\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 0\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      REVERT \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n    tag 1\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPDEST \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      POP \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 4\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      CALLDATASIZE \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      LT \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 2\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 0\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      CALLDATALOAD \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH E0\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      SHR \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 40C10F19\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      GT \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 15\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 40C10F19\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 9\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 70A08231\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 10\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 95D89B41\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 11\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH A457C2D7\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 12\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH A9059CBB\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 13\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH DD62ED3E\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 14\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 2\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMP \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n    tag 15\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPDEST \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 6FDDE03\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 3\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 95EA7B3\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 4\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 18160DDD\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 5\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 23B872DD\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 6\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 313CE567\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 7\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 39509351\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      EQ \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH [tag] 8\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPI \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n    tag 2\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      JUMPDEST \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      PUSH 0\t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      DUP1 \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n      REVERT \t\t\tcontract stNEAR is ERC20 {\\r\\n...\n    tag 3\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 16\t\t\t\n      PUSH [tag] 17\t\t\t\n      JUMP \t\t\t\n    tag 16\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 18\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 19\t\t\t\n      JUMP \t\t\t\n    tag 18\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 20\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 21\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 22\t\t\t\n      JUMP \t\t\t\n    tag 21\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 23\t\t\t\n      JUMP \t\t\t\n    tag 20\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 24\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 25\t\t\t\n      JUMP \t\t\t\n    tag 24\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 5\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 26\t\t\t\n      PUSH [tag] 27\t\t\t\n      JUMP \t\t\t\n    tag 26\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 28\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 29\t\t\t\n      JUMP \t\t\t\n    tag 28\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 30\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 31\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 32\t\t\t\n      JUMP \t\t\t\n    tag 31\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 33\t\t\t\n      JUMP \t\t\t\n    tag 30\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 34\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 25\t\t\t\n      JUMP \t\t\t\n    tag 34\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 7\t\t\tfunction decimals() public vie...\n      JUMPDEST \t\t\tfunction decimals() public vie...\n      PUSH [tag] 35\t\t\tfunction decimals() public vie...\n      PUSH [tag] 36\t\t\tfunction decimals() public vie...\n      JUMP \t\t\tfunction decimals() public vie...\n    tag 35\t\t\tfunction decimals() public vie...\n      JUMPDEST \t\t\tfunction decimals() public vie...\n      PUSH 40\t\t\tfunction decimals() public vie...\n      MLOAD \t\t\tfunction decimals() public vie...\n      PUSH [tag] 37\t\t\tfunction decimals() public vie...\n      SWAP2 \t\t\tfunction decimals() public vie...\n      SWAP1 \t\t\tfunction decimals() public vie...\n      PUSH [tag] 38\t\t\tfunction decimals() public vie...\n      JUMP \t\t\tfunction decimals() public vie...\n    tag 37\t\t\tfunction decimals() public vie...\n      JUMPDEST \t\t\tfunction decimals() public vie...\n      PUSH 40\t\t\tfunction decimals() public vie...\n      MLOAD \t\t\tfunction decimals() public vie...\n      DUP1 \t\t\tfunction decimals() public vie...\n      SWAP2 \t\t\tfunction decimals() public vie...\n      SUB \t\t\tfunction decimals() public vie...\n      SWAP1 \t\t\tfunction decimals() public vie...\n      RETURN \t\t\tfunction decimals() public vie...\n    tag 8\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 39\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 40\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 22\t\t\t\n      JUMP \t\t\t\n    tag 40\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 41\t\t\t\n      JUMP \t\t\t\n    tag 39\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 42\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 25\t\t\t\n      JUMP \t\t\t\n    tag 42\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 9\t\t\tfunction mint(address to, uint...\n      JUMPDEST \t\t\tfunction mint(address to, uint...\n      PUSH [tag] 43\t\t\tfunction mint(address to, uint...\n      PUSH 4\t\t\tfunction mint(address to, uint...\n      DUP1 \t\t\tfunction mint(address to, uint...\n      CALLDATASIZE \t\t\tfunction mint(address to, uint...\n      SUB \t\t\tfunction mint(address to, uint...\n      DUP2 \t\t\tfunction mint(address to, uint...\n      ADD \t\t\tfunction mint(address to, uint...\n      SWAP1 \t\t\tfunction mint(address to, uint...\n      PUSH [tag] 44\t\t\tfunction mint(address to, uint...\n      SWAP2 \t\t\tfunction mint(address to, uint...\n      SWAP1 \t\t\tfunction mint(address to, uint...\n      PUSH [tag] 22\t\t\tfunction mint(address to, uint...\n      JUMP \t\t\tfunction mint(address to, uint...\n    tag 44\t\t\tfunction mint(address to, uint...\n      JUMPDEST \t\t\tfunction mint(address to, uint...\n      PUSH [tag] 45\t\t\tfunction mint(address to, uint...\n      JUMP \t\t\tfunction mint(address to, uint...\n    tag 43\t\t\tfunction mint(address to, uint...\n      JUMPDEST \t\t\tfunction mint(address to, uint...\n      STOP \t\t\tfunction mint(address to, uint...\n    tag 10\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 46\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 47\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 48\t\t\t\n      JUMP \t\t\t\n    tag 47\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 49\t\t\t\n      JUMP \t\t\t\n    tag 46\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 50\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 29\t\t\t\n      JUMP \t\t\t\n    tag 50\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 11\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 51\t\t\t\n      PUSH [tag] 52\t\t\t\n      JUMP \t\t\t\n    tag 51\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 53\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 19\t\t\t\n      JUMP \t\t\t\n    tag 53\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 12\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 54\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 55\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 22\t\t\t\n      JUMP \t\t\t\n    tag 55\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 56\t\t\t\n      JUMP \t\t\t\n    tag 54\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 57\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 25\t\t\t\n      JUMP \t\t\t\n    tag 57\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 13\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 58\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 59\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 22\t\t\t\n      JUMP \t\t\t\n    tag 59\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 60\t\t\t\n      JUMP \t\t\t\n    tag 58\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 61\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 25\t\t\t\n      JUMP \t\t\t\n    tag 61\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 14\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 62\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      CALLDATASIZE \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 63\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 64\t\t\t\n      JUMP \t\t\t\n    tag 63\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 65\t\t\t\n      JUMP \t\t\t\n    tag 62\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 66\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 29\t\t\t\n      JUMP \t\t\t\n    tag 66\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 17\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 3\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 68\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 69\t\t\t\n      JUMP \t\t\t\n    tag 68\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 70\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 69\t\t\t\n      JUMP \t\t\t\n    tag 70\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 71\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 72\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 71\t\t\t\n      JUMP \t\t\t\n    tag 72\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 73\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 73\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 71\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 23\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 75\t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 75\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 77\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMP \t\t\t\n    tag 77\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 27\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 33\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 81\t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 81\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 82\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 83\t\t\t\n      JUMP \t\t\t\n    tag 82\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 84\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 84\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 36\t\t\tfunction decimals() public vie...\n      JUMPDEST \t\t\tfunction decimals() public vie...\n      PUSH 0\t\t\tuint8\n      PUSH 18\t\t\t24\n      SWAP1 \t\t\treturn 24\n      POP \t\t\treturn 24\n      SWAP1 \t\t\tfunction decimals() public vie...\n      JUMP \t\t\tfunction decimals() public vie...\n    tag 41\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 88\t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 88\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 89\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 90\t\t\t\n      DUP6 \t\t\t\n      DUP10 \t\t\t\n      PUSH [tag] 65\t\t\t\n      JUMP \t\t\t\n    tag 90\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 91\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 92\t\t\t\n      JUMP \t\t\t\n    tag 91\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMP \t\t\t\n    tag 89\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 45\t\t\tfunction mint(address to, uint...\n      JUMPDEST \t\t\tfunction mint(address to, uint...\n      PUSH [tag] 94\t\t\t_mint(to, amount)\n      DUP3 \t\t\tto\n      DUP3 \t\t\tamount\n      PUSH [tag] 95\t\t\t_mint\n      JUMP \t\t\t_mint(to, amount)\n    tag 94\t\t\t_mint(to, amount)\n      JUMPDEST \t\t\t_mint(to, amount)\n      POP \t\t\tfunction mint(address to, uint...\n      POP \t\t\tfunction mint(address to, uint...\n      JUMP \t\t\tfunction mint(address to, uint...\n    tag 49\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 4\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 98\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 69\t\t\t\n      JUMP \t\t\t\n    tag 98\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 99\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 69\t\t\t\n      JUMP \t\t\t\n    tag 99\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 100\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 101\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 100\t\t\t\n      JUMP \t\t\t\n    tag 101\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 102\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 102\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 100\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 56\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 104\t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 104\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 105\t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      PUSH [tag] 65\t\t\t\n      JUMP \t\t\t\n    tag 105\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 106\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 107\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 108\t\t\t\n      JUMP \t\t\t\n    tag 107\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 106\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 109\t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      DUP7 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMP \t\t\t\n    tag 109\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 60\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 111\t\t\t\n      PUSH [tag] 76\t\t\t\n      JUMP \t\t\t\n    tag 111\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 112\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 85\t\t\t\n      JUMP \t\t\t\n    tag 112\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 65\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 76\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 78\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 116\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 117\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 118\t\t\t\n      JUMP \t\t\t\n    tag 117\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 116\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 119\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 120\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 121\t\t\t\n      JUMP \t\t\t\n    tag 120\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 119\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 122\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 29\t\t\t\n      JUMP \t\t\t\n    tag 122\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 83\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 124\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 65\t\t\t\n      JUMP \t\t\t\n    tag 124\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 125\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 126\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 127\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 128\t\t\t\n      JUMP \t\t\t\n    tag 127\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 126\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 129\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 78\t\t\t\n      JUMP \t\t\t\n    tag 129\t\t\t\n      JUMPDEST \t\t\t\n    tag 125\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 85\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 131\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 132\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 133\t\t\t\n      JUMP \t\t\t\n    tag 132\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 131\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 134\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 135\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 136\t\t\t\n      JUMP \t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 134\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 137\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 137\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 139\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 140\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 141\t\t\t\n      JUMP \t\t\t\n    tag 140\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 139\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP7 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      DUP5 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 142\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 29\t\t\t\n      JUMP \t\t\t\n    tag 142\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      PUSH [tag] 143\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 144\t\t\t\n      JUMP \t\t\t\n    tag 143\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 146\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 8C379A000000000000000000000000000000000000000000000000000000000\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 147\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 148\t\t\t\n      JUMP \t\t\t\n    tag 147\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 146\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 149\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 138\t\t\t\n      JUMP \t\t\t\n    tag 149\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 2\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 150\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 92\t\t\t\n      JUMP \t\t\t\n    tag 150\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 151\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 29\t\t\t\n      JUMP \t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      PUSH [tag] 152\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 144\t\t\t\n      JUMP \t\t\t\n    tag 152\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 138\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 144\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 155\t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMPDEST \t\t\t-License-Identifier: MIT\\r\\npr...\n      PUSH 0\t\t\t\\nimpor\n      DUP2 \t\t\token/\n      MLOAD \t\t\tacts/token/E\n      SWAP1 \t\t\telin/contracts/token/E\n      POP \t\t\telin/contracts/token/E\n      SWAP2 \t\t\t-License-Identifier: MIT\\r\\npr...\n      SWAP1 \t\t\t-License-Identifier: MIT\\r\\npr...\n      POP \t\t\t-License-Identifier: MIT\\r\\npr...\n      JUMP \t\t\t-License-Identifier: MIT\\r\\npr...\n    tag 156\t\t\tl\";\\r\\n\\r\\ncontract stNEAR is ...\n      JUMPDEST \t\t\tl\";\\r\\n\\r\\ncontract stNEAR is ...\n      PUSH 0\t\t\tked NEAR\", \n      DUP3 \t\t\tint(ms\n      DUP3 \t\t\t   \n      MSTORE \t\t\t\\r\\n        _mint(msg\n      PUSH 20\t\t\t);\\r\\n\n      DUP3 \t\t\t** \n      ADD \t\t\t 10 ** 24);\\r\\n \n      SWAP1 \t\t\tinitialSupply * 10 ** 24);\\r\\n...\n      POP \t\t\tinitialSupply * 10 ** 24);\\r\\n...\n      SWAP3 \t\t\tl\";\\r\\n\\r\\ncontract stNEAR is ...\n      SWAP2 \t\t\tl\";\\r\\n\\r\\ncontract stNEAR is ...\n      POP \t\t\tl\";\\r\\n\\r\\ncontract stNEAR is ...\n      POP \t\t\tl\";\\r\\n\\r\\ncontract stNEAR is ...\n      JUMP \t\t\tl\";\\r\\n\\r\\ncontract stNEAR is ...\n    tag 157\t\t\tfunction decimals() public vie...\n      JUMPDEST \t\t\tfunction decimals() public vie...\n      PUSH 0\t\t\tn\n    tag 197\t\t\t }\\r\\n\\r\\n    function mint(ad...\n      JUMPDEST \t\t\t }\\r\\n\\r\\n    function mint(ad...\n      DUP4 \t\t\ttion m\n      DUP2 \t\t\tu\n      LT \t\t\t  function mi\n      ISZERO \t\t\t }\\r\\n\\r\\n    function mint(ad...\n      PUSH [tag] 199\t\t\t }\\r\\n\\r\\n    function mint(ad...\n      JUMPI \t\t\t }\\r\\n\\r\\n    function mint(ad...\n      DUP1 \t\t\t\\n\n      DUP3 \t\t\t}\\r\\n\n      ADD \t\t\t    }\\r\\n}\\r\\n\n      MLOAD \t\t\tnt);\\r\\n    }\\r\\n}\\r\\n\n      DUP2 \t\t\ta\n      DUP5 \t\t\t(to\n      ADD \t\t\tmint(to, am\n      MSTORE \t\t\t      _mint(to, amount);\\r\\n  ...\n      PUSH 20\t\t\tui\n      DUP2 \t\t\to\n      ADD \t\t\tss to, uin\n      SWAP1 \t\t\taddress to, uin\n      POP \t\t\taddress to, uin\n      PUSH [tag] 197\t\t\t }\\r\\n\\r\\n    function mint(ad...\n      JUMP \t\t\t }\\r\\n\\r\\n    function mint(ad...\n    tag 199\t\t\t }\\r\\n\\r\\n    function mint(ad...\n      JUMPDEST \t\t\t }\\r\\n\\r\\n    function mint(ad...\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t8) {\\r\\n        return 24;\\r\\n...\n      POP \t\t\tfunction decimals() public vie...\n      POP \t\t\tfunction decimals() public vie...\n      POP \t\t\tfunction decimals() public vie...\n      JUMP \t\t\tfunction decimals() public vie...\n    tag 158\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 159\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 202\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 155\t\t\t\n      JUMP \t\t\t\n    tag 202\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 203\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 203\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 157\t\t\t\n      JUMP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 205\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 158\t\t\t\n      JUMP \t\t\t\n    tag 205\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 19\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 207\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 159\t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 161\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 163\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 164\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 213\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 163\t\t\t\n      JUMP \t\t\t\n    tag 213\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 215\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 164\t\t\t\n      JUMP \t\t\t\n    tag 215\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 216\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 216\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 166\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 218\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 167\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 168\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 221\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 167\t\t\t\n      JUMP \t\t\t\n    tag 221\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 222\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 222\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 169\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 224\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 168\t\t\t\n      JUMP \t\t\t\n    tag 224\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 22\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 226\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 227\t\t\t\n      PUSH [tag] 161\t\t\t\n      JUMP \t\t\t\n    tag 227\t\t\t\n      JUMPDEST \t\t\t\n    tag 226\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 228\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 229\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 169\t\t\t\n      JUMP \t\t\t\n    tag 229\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 170\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 171\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 232\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 170\t\t\t\n      JUMP \t\t\t\n    tag 232\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 25\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 234\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 171\t\t\t\n      JUMP \t\t\t\n    tag 234\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 236\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 167\t\t\t\n      JUMP \t\t\t\n    tag 236\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 29\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 238\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 172\t\t\t\n      JUMP \t\t\t\n    tag 238\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 32\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      DUP7 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 240\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 241\t\t\t\n      PUSH [tag] 161\t\t\t\n      JUMP \t\t\t\n    tag 241\t\t\t\n      JUMPDEST \t\t\t\n    tag 240\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 242\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 242\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 243\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      PUSH [tag] 244\t\t\t\n      DUP7 \t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 169\t\t\t\n      JUMP \t\t\t\n    tag 244\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      JUMP \t\t\t\n    tag 173\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 247\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 173\t\t\t\n      JUMP \t\t\t\n    tag 247\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 38\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 249\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 174\t\t\t\n      JUMP \t\t\t\n    tag 249\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 48\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 251\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 252\t\t\t\n      PUSH [tag] 161\t\t\t\n      JUMP \t\t\t\n    tag 252\t\t\t\n      JUMPDEST \t\t\t\n    tag 251\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 253\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 253\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 64\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 255\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 256\t\t\t\n      PUSH [tag] 161\t\t\t\n      JUMP \t\t\t\n    tag 256\t\t\t\n      JUMPDEST \t\t\t\n    tag 255\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 257\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 257\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      PUSH [tag] 258\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 258\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 262\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 263\t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMP \t\t\t\n    tag 263\t\t\t\n      JUMPDEST \t\t\t\n    tag 262\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 176\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B7100000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 92\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 266\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 167\t\t\t\n      JUMP \t\t\t\n    tag 266\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 267\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 167\t\t\t\n      JUMP \t\t\t\n    tag 267\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 268\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 269\t\t\t\n      PUSH [tag] 176\t\t\t\n      JUMP \t\t\t\n    tag 269\t\t\t\n      JUMPDEST \t\t\t\n    tag 268\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 177\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 207A65726F000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 178\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 272\t\t\t\n      PUSH 25\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 272\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 273\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 177\t\t\t\n      JUMP \t\t\t\n    tag 273\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 108\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 275\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 178\t\t\t\n      JUMP \t\t\t\n    tag 275\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 179\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 45524332303A20617070726F76652066726F6D20746865207A65726F20616464\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 7265737300000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 180\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 278\t\t\t\n      PUSH 24\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 278\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 279\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 179\t\t\t\n      JUMP \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 118\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 281\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 180\t\t\t\n      JUMP \t\t\t\n    tag 281\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 181\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 45524332303A20617070726F766520746F20746865207A65726F206164647265\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 7373000000000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 182\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 284\t\t\t\n      PUSH 22\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 284\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 285\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 181\t\t\t\n      JUMP \t\t\t\n    tag 285\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 121\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 287\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 182\t\t\t\n      JUMP \t\t\t\n    tag 287\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 183\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 290\t\t\t\n      PUSH 1D\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 290\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 291\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 183\t\t\t\n      JUMP \t\t\t\n    tag 291\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 128\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 293\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 184\t\t\t\n      JUMP \t\t\t\n    tag 293\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 185\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 45524332303A207472616E736665722066726F6D20746865207A65726F206164\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 6472657373000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 296\t\t\t\n      PUSH 25\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 296\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 297\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 185\t\t\t\n      JUMP \t\t\t\n    tag 297\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 133\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 299\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 186\t\t\t\n      JUMP \t\t\t\n    tag 299\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 187\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 45524332303A207472616E7366657220746F20746865207A65726F2061646472\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 6573730000000000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 188\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 302\t\t\t\n      PUSH 23\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 302\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 303\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP \t\t\t\n    tag 303\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 136\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 305\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 188\t\t\t\n      JUMP \t\t\t\n    tag 305\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 189\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 45524332303A207472616E7366657220616D6F756E7420657863656564732062\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 616C616E63650000000000000000000000000000000000000000000000000000\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 190\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 308\t\t\t\n      PUSH 26\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 308\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 309\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 189\t\t\t\n      JUMP \t\t\t\n    tag 309\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 141\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 311\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 190\t\t\t\n      JUMP \t\t\t\n    tag 311\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 191\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 45524332303A206D696E7420746F20746865207A65726F206164647265737300\t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 314\t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 314\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 315\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 191\t\t\t\n      JUMP \t\t\t\n    tag 315\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 148\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 317\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 317\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    .data\n"
}